import unittest
from pathlib import Path
from unittest import SkipTest

from pycubexr import CubexParser
from pycubexr.utils.exceptions import MissingMetricError


class TestMetricValuesSummary(unittest.TestCase):
    cubex: CubexParser = None

    @classmethod
    def setUpClass(cls) -> None:
        try:
            cubex_file_path = Path("../data/cube_samples/summary.cubex").resolve()
            cls.cubex = CubexParser(cubex_file_path).__enter__()
        except FileNotFoundError as err:
            raise SkipTest("Required test file was not found.") from err

    @classmethod
    def tearDownClass(cls) -> None:
        cls.cubex.__exit__(None, None, None)

    def get_values_for_metric(self, name, convert_to_exclusive=False, convert_to_inclusive=False):
        metric = self.cubex.get_metric_by_name(name)
        metric_values = self.cubex.get_metric_values(metric)
        # iterate over all callpaths in cubex file
        cnode_values = []
        for cnode in self.cubex.all_cnodes():
            # return the measurement values for all mpi processes for the current metric and callpath
            cnode_values.append(metric_values.value(cnode, convert_to_exclusive, convert_to_inclusive))
        return cnode_values

    def test_time_exclusive(self):
        correct_values = [0.029814288995112292, 0.007666721999992632, 31.604505818000007, 1.0360500000000004E-4,
                          2.0912E-5, 0.010920089, 0.005929885999999999, 0.026655237000000005, 0.002535954,
                          0.0012003390000000001, 31.790031951000007, 9.058600000000003E-5, 5.606697858000001,
                          19.896759703000008, 1.74374E-4, 0.1223193040023034, 214.61635383800058, 0.9019467030000001,
                          1.1759050220000005, 253.53728200199998, 5097.4454413230005, 0.7210722109939525,
                          5808.050042172001, 0.9219068479999999, 7.423873078000002, 44.282492194999996,
                          1.2576670529999994, 0.07553689999999985, 0.49302481000000004, 142.64621179099998,
                          38.419368416999994, 1424.813340694, 8.701698088000002, 1.092901251, 0.061307341000000126,
                          0.48370134499999995, 2.481668434, 0.8825147230018047, 7379.340258137998, 0.829068968,
                          7.565844953000003, 30.936598674999992, 1.84053161, 0.07793935699999999, 0.853287691,
                          203.09476145099998, 23.153981006999995, 1145.578152606, 5.724986006, 2.037404437,
                          0.07693115599999989, 0.9184235110000002, 3.117775544, 0.862576668998372, 6949.885351005001,
                          0.7541351819999998, 7.669177287999998, 27.16538399300001, 1.7202842189999994,
                          0.08009352000000003, 0.7755997910000002, 184.584668825, 20.725434961999998,
                          1171.7633488670003, 3.3672599809999992, 1.984601061, 0.07831409099999997, 0.893512158,
                          3.1010785190000005, 460.94353208199993, 3.912660000000001E-4, 0.803392147, 0.002304017,
                          1.5663999999999996E-4, 1.3997799999999997E-4, 2.0153000000000002E-5, 9.343589999879498E-4,
                          2.5330325760000005, 0.13869110400000004, 0.8462925900000116, 0.0016855900000000003,
                          0.004099000999999999, 1.1960031460000007, 20.34217032, 0.6242830290000001,
                          0.18557575699999998, 0.013782131999999997, 6.409E-5, 0.006652651, ]
        metric_values = self.get_values_for_metric('time', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_time_inclusive(self):
        correct_values = [30807.790650734998, 31.629147032, 31.604505818000007, 1.0360500000000004E-4, 2.0912E-5,
                          0.010920089, 0.005929885999999999, 0.026655237000000005, 0.002535954, 0.0012003390000000001,
                          31.790031951000007, 9.058600000000003E-5, 5.606697858000001, 19.896759703000008, 1.74374E-4,
                          30692.107872866003, 5567.676928888001, 0.9019467030000001, 1.1759050220000005,
                          253.53728200199998, 5097.4454413230005, 7481.9258126279965, 5816.395822098001,
                          0.9219068479999999, 7.423873078000002, 45.540159247999995, 1.2576670529999994,
                          0.5685617099999999, 0.49302481000000004, 142.64621179099998, 38.419368416999994,
                          1424.813340694, 9.794599339000003, 1.092901251, 0.5450086860000001, 0.48370134499999995,
                          2.481668434, 8806.028459833, 7387.735172058998, 0.829068968, 7.565844953000003,
                          32.77713028499999, 1.84053161, 0.931227048, 0.853287691, 203.09476145099998,
                          23.153981006999995, 1145.578152606, 7.762390443, 2.037404437, 0.9953546670000001,
                          0.9184235110000002, 3.117775544, 8375.410820131001, 6958.308663475002, 0.7541351819999998,
                          7.669177287999998, 28.88566821200001, 1.7202842189999994, 0.8556933110000002,
                          0.7755997910000002, 184.584668825, 20.725434961999998, 1171.7633488670003, 5.3518610419999995,
                          1.984601061, 0.9718262489999999, 0.893512158, 3.1010785190000005, 460.94353208199993,
                          3.912660000000001E-4, 0.803392147, 0.002304017, 1.5663999999999996E-4, 1.3997799999999997E-4,
                          2.0153000000000002E-5, 25.872767472, 2.6717236800000004, 0.13869110400000004,
                          22.390250647000013, 0.0016855900000000003, 0.004099000999999999, 1.1960031460000007,
                          20.34217032, 0.809858786, 0.18557575699999998, 0.013782131999999997, 6.409E-5, 0.006652651, ]
        metric_values = self.get_values_for_metric('time', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_execution_exclusive(self):
        correct_values = [0.029814288995112292, 0.007666721999992632, 31.604505818000007, 1.0360500000000004E-4,
                          2.0912E-5, 0.010920089, 0.005929885999999999, 0.026655237000000005, 0.002535954,
                          0.0012003390000000001, 31.790031951000007, 9.058600000000003E-5, 5.606697858000001,
                          19.896759703000008, 1.74374E-4, 0.1223193040023034, 214.61635383800058, 0.9019467030000001,
                          1.1759050220000005, 253.53728200199998, 5097.4454413230005, 0.7210722109939525,
                          5808.050042172001, 0.9219068479999999, 7.423873078000002, 44.282492194999996,
                          1.2576670529999994, 0.07553689999999985, 0.49302481000000004, 142.64621179099998,
                          38.419368416999994, 1424.813340694, 8.701698088000002, 1.092901251, 0.061307341000000126,
                          0.48370134499999995, 2.481668434, 0.8825147230018047, 7379.340258137998, 0.829068968,
                          7.565844953000003, 30.936598674999992, 1.84053161, 0.07793935699999999, 0.853287691,
                          203.09476145099998, 23.153981006999995, 1145.578152606, 5.724986006, 2.037404437,
                          0.07693115599999989, 0.9184235110000002, 3.117775544, 0.862576668998372, 6949.885351005001,
                          0.7541351819999998, 7.669177287999998, 27.16538399300001, 1.7202842189999994,
                          0.08009352000000003, 0.7755997910000002, 184.584668825, 20.725434961999998,
                          1171.7633488670003, 3.3672599809999992, 1.984601061, 0.07831409099999997, 0.893512158,
                          3.1010785190000005, 460.94353208199993, 3.912660000000001E-4, 0.803392147, 0.002304017,
                          1.5663999999999996E-4, 1.3997799999999997E-4, 2.0153000000000002E-5, 9.343589999879498E-4,
                          2.5330325760000005, 0.13869110400000004, 0.8462925900000116, 0.0016855900000000003,
                          0.004099000999999999, 1.1960031460000007, 20.34217032, 0.6242830290000001,
                          0.18557575699999998, 0.013782131999999997, 6.409E-5, 0.006652651, ]
        metric_values = self.get_values_for_metric('execution', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_execution_inclusive(self):
        correct_values = [30807.790650734998, 31.629147032, 31.604505818000007, 1.0360500000000004E-4, 2.0912E-5,
                          0.010920089, 0.005929885999999999, 0.026655237000000005, 0.002535954, 0.0012003390000000001,
                          31.790031951000007, 9.058600000000003E-5, 5.606697858000001, 19.896759703000008, 1.74374E-4,
                          30692.107872866003, 5567.676928888001, 0.9019467030000001, 1.1759050220000005,
                          253.53728200199998, 5097.4454413230005, 7481.9258126279965, 5816.395822098001,
                          0.9219068479999999, 7.423873078000002, 45.540159247999995, 1.2576670529999994,
                          0.5685617099999999, 0.49302481000000004, 142.64621179099998, 38.419368416999994,
                          1424.813340694, 9.794599339000003, 1.092901251, 0.5450086860000001, 0.48370134499999995,
                          2.481668434, 8806.028459833, 7387.735172058998, 0.829068968, 7.565844953000003,
                          32.77713028499999, 1.84053161, 0.931227048, 0.853287691, 203.09476145099998,
                          23.153981006999995, 1145.578152606, 7.762390443, 2.037404437, 0.9953546670000001,
                          0.9184235110000002, 3.117775544, 8375.410820131001, 6958.308663475002, 0.7541351819999998,
                          7.669177287999998, 28.88566821200001, 1.7202842189999994, 0.8556933110000002,
                          0.7755997910000002, 184.584668825, 20.725434961999998, 1171.7633488670003, 5.3518610419999995,
                          1.984601061, 0.9718262489999999, 0.893512158, 3.1010785190000005, 460.94353208199993,
                          3.912660000000001E-4, 0.803392147, 0.002304017, 1.5663999999999996E-4, 1.3997799999999997E-4,
                          2.0153000000000002E-5, 25.872767472, 2.6717236800000004, 0.13869110400000004,
                          22.390250647000013, 0.0016855900000000003, 0.004099000999999999, 1.1960031460000007,
                          20.34217032, 0.809858786, 0.18557575699999998, 0.013782131999999997, 6.409E-5, 0.006652651, ]
        metric_values = self.get_values_for_metric('execution', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_exclusive(self):
        correct_values = [0.0, -1.4210854715202004E-14, 31.604505818000007, 1.0360500000000004E-4, 2.0912E-5,
                          0.010920089, 0.005929885999999999, 0.026655237000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          -1.1368683772161603E-13, 0.0, 0.9019467030000001, 1.1759050220000005, 253.53728200199998, 0.0,
                          2.8421709430404007E-14, 0.0, 0.0, 0.0, 0.0, 1.2576670529999994, 0.0, 0.49302481000000004,
                          142.64621179099998, 0.0, 0.0, 0.0, 1.092901251, 0.0, 0.48370134499999995, 0.0,
                          1.1368683772161603E-13, 0.0, 0.0, 0.0, 0.0, 1.84053161, 0.0, 0.853287691, 203.09476145099998,
                          0.0, 0.0, 0.0, 2.037404437, 0.0, 0.9184235110000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          1.7202842189999994, 0.0, 0.7755997910000002, 184.584668825, 0.0, 0.0, 0.0, 1.984601061, 0.0,
                          0.893512158, 0.0, 0.0, 0.0, 0.803392147, 0.0, 0.0, 0.0, 0.0, -4.440892098500626E-16, 0.0,
                          0.13869110400000004, -4.440892098500626E-16, 0.0016855900000000003, 0.004099000999999999,
                          1.1960031460000007, 0.0, 0.0, 0.18557575699999998, 0.013782131999999997, 0.0, 0.006652651, ]
        metric_values = self.get_values_for_metric('mpi', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_inclusive(self):
        correct_values = [834.2897318059998, 31.621480309999992, 31.604505818000007, 1.0360500000000004E-4, 2.0912E-5,
                          0.010920089, 0.005929885999999999, 0.026655237000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          800.291714731, 255.61513372699997, 0.9019467030000001, 1.1759050220000005, 253.53728200199998,
                          0.0, 145.97350624999999, 0.0, 0.0, 0.0, 1.2576670529999994, 1.2576670529999994,
                          0.49302481000000004, 0.49302481000000004, 142.64621179099998, 0.0, 0.0, 1.092901251,
                          1.092901251, 0.48370134499999995, 0.48370134499999995, 0.0, 208.74440870000006, 0.0, 0.0, 0.0,
                          1.84053161, 1.84053161, 0.853287691, 0.853287691, 203.09476145099998, 0.0, 0.0, 2.037404437,
                          2.037404437, 0.9184235110000002, 0.9184235110000002, 0.0, 189.958666054, 0.0, 0.0, 0.0,
                          1.7202842189999994, 1.7202842189999994, 0.7755997910000002, 0.7755997910000002, 184.584668825,
                          0.0, 0.0, 1.984601061, 1.984601061, 0.893512158, 0.893512158, 0.0, 0.0, 0.0, 0.803392147, 0.0,
                          0.0, 0.0, 0.0, 1.526054598, 0.13869110400000004, 0.13869110400000004, 1.2017877370000003,
                          0.0016855900000000003, 0.004099000999999999, 1.1960031460000007, 0.0, 0.18557575699999998,
                          0.18557575699999998, 0.013782131999999997, 0.0, 0.006652651, ]
        metric_values = self.get_values_for_metric('mpi', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_synchronization_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.803392147, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_synchronization', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_synchronization_inclusive(self):
        correct_values = [0.803392147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.803392147,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_synchronization', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_sync_collective_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.803392147, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_sync_collective', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_sync_collective_inclusive(self):
        correct_values = [0.803392147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.803392147,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_sync_collective', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_synchronization_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_synchronization', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_synchronization_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_synchronization', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_active_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_active', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_active_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_active', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_passive_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_passive', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_passive_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_passive', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_communication_exclusive(self):
        correct_values = [3.410605131648481E-13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.026655237000000005, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, -1.1368683772161603E-13, 0.0, 0.9019467030000001, 1.1759050220000005,
                          253.53728200199998, 0.0, 2.8421709430404007E-14, 0.0, 0.0, 0.0, 0.0, 1.2576670529999994, 0.0,
                          0.49302481000000004, 142.64621179099998, 0.0, 0.0, 0.0, 1.092901251, 0.0, 0.48370134499999995,
                          0.0, 1.1368683772161603E-13, 0.0, 0.0, 0.0, 0.0, 1.84053161, 0.0, 0.853287691,
                          203.09476145099998, 0.0, 0.0, 0.0, 2.037404437, 0.0, 0.9184235110000002, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 1.7202842189999994, 0.0, 0.7755997910000002, 184.584668825, 0.0, 0.0, 0.0,
                          1.984601061, 0.0, 0.893512158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.440892098500626E-16,
                          0.0, 0.13869110400000004, -4.440892098500626E-16, 0.0016855900000000003, 0.004099000999999999,
                          1.1960031460000007, 0.0, 0.0, 0.18557575699999998, 0.013782131999999997, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_communication', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_communication_inclusive(self):
        correct_values = [801.8582066980002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.026655237000000005, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 800.291714731, 255.61513372699997, 0.9019467030000001, 1.1759050220000005,
                          253.53728200199998, 0.0, 145.97350624999999, 0.0, 0.0, 0.0, 1.2576670529999994,
                          1.2576670529999994, 0.49302481000000004, 0.49302481000000004, 142.64621179099998, 0.0, 0.0,
                          1.092901251, 1.092901251, 0.48370134499999995, 0.48370134499999995, 0.0, 208.74440870000006,
                          0.0, 0.0, 0.0, 1.84053161, 1.84053161, 0.853287691, 0.853287691, 203.09476145099998, 0.0, 0.0,
                          2.037404437, 2.037404437, 0.9184235110000002, 0.9184235110000002, 0.0, 189.958666054, 0.0,
                          0.0, 0.0, 1.7202842189999994, 1.7202842189999994, 0.7755997910000002, 0.7755997910000002,
                          184.584668825, 0.0, 0.0, 1.984601061, 1.984601061, 0.893512158, 0.893512158, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 1.526054598, 0.13869110400000004, 0.13869110400000004,
                          1.2017877370000003, 0.0016855900000000003, 0.004099000999999999, 1.1960031460000007, 0.0,
                          0.18557575699999998, 0.18557575699999998, 0.013782131999999997, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_communication', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_point2point_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          -1.1368683772161603E-13, 0.0, 0.9019467030000001, 1.1759050220000005, 253.53728200199998, 0.0,
                          2.8421709430404007E-14, 0.0, 0.0, 0.0, 0.0, 1.2576670529999994, 0.0, 0.49302481000000004,
                          142.64621179099998, 0.0, 0.0, 0.0, 1.092901251, 0.0, 0.48370134499999995, 0.0,
                          1.1368683772161603E-13, 0.0, 0.0, 0.0, 0.0, 1.84053161, 0.0, 0.853287691, 203.09476145099998,
                          0.0, 0.0, 0.0, 2.037404437, 0.0, 0.9184235110000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          1.7202842189999994, 0.0, 0.7755997910000002, 184.584668825, 0.0, 0.0, 0.0, 1.984601061, 0.0,
                          0.893512158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.440892098500626E-16,
                          0.0016855900000000003, 0.004099000999999999, 1.1960031460000007, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, ]
        metric_values = self.get_values_for_metric('mpi_point2point', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_point2point_inclusive(self):
        correct_values = [801.493502468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          800.291714731, 255.61513372699997, 0.9019467030000001, 1.1759050220000005, 253.53728200199998,
                          0.0, 145.97350624999999, 0.0, 0.0, 0.0, 1.2576670529999994, 1.2576670529999994,
                          0.49302481000000004, 0.49302481000000004, 142.64621179099998, 0.0, 0.0, 1.092901251,
                          1.092901251, 0.48370134499999995, 0.48370134499999995, 0.0, 208.74440870000006, 0.0, 0.0, 0.0,
                          1.84053161, 1.84053161, 0.853287691, 0.853287691, 203.09476145099998, 0.0, 0.0, 2.037404437,
                          2.037404437, 0.9184235110000002, 0.9184235110000002, 0.0, 189.958666054, 0.0, 0.0, 0.0,
                          1.7202842189999994, 1.7202842189999994, 0.7755997910000002, 0.7755997910000002, 184.584668825,
                          0.0, 0.0, 1.984601061, 1.984601061, 0.893512158, 0.893512158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 1.2017877370000003, 0.0, 0.0, 1.2017877370000003, 0.0016855900000000003,
                          0.004099000999999999, 1.1960031460000007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_point2point', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_collective_exclusive(self):
        correct_values = [-1.6653345369377348E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.026655237000000005, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.551115123125783E-17, 0.0, 0.13869110400000004, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.18557575699999998, 0.013782131999999997, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_collective', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_collective_inclusive(self):
        correct_values = [0.3647042299999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.026655237000000005, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3242668610000001, 0.13869110400000004,
                          0.13869110400000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18557575699999998, 0.18557575699999998,
                          0.013782131999999997, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_collective', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_communication_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_communication', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_communication_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_communication', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_io_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_io', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_io_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_io', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_io_collective_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_io_collective', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_io_collective_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_io_collective', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_init_exit_exclusive(self):
        correct_values = [3.552713678800501E-15, 0.0, 31.604505818000007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.006652651, ]
        metric_values = self.get_values_for_metric('mpi_init_exit', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_init_exit_inclusive(self):
        correct_values = [31.61115846900001, 31.604505818000007, 31.604505818000007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.006652651, ]
        metric_values = self.get_values_for_metric('mpi_init_exit', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_time_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_time', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_time_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_time', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_flush_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_flush', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_flush_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_flush', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_management_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_management', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_management_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_management', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_synchronization_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_synchronization', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_synchronization_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_synchronization', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_barrier_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_barrier', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_barrier_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_barrier', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ebarrier_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ebarrier', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ebarrier_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ebarrier', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ibarrier_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ibarrier', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ibarrier_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ibarrier', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_critical_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_critical', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_critical_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_critical', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_lock_api_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_lock_api', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_lock_api_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_lock_api', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ordered_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ordered', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ordered_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ordered', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_time(self):
        self.assertRaises(MissingMetricError, self.get_values_for_metric, 'opencl_time', convert_to_exclusive=True)
        self.assertRaises(MissingMetricError, self.get_values_for_metric, 'opencl_time', convert_to_inclusive=True)

    def test_opencl_host_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_host', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_setup_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_setup', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_setup_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_setup', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_comm_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_comm', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_comm_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_comm', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_sync_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_sync', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_sync_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_sync', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_kernel_launches_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_kernel_launches', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_kernel_launches_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_kernel_launches', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_device_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_device', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_device_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_device', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_kernel_executions_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_kernel_executions', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_opencl_kernel_executions_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('opencl_kernel_executions', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_time(self):
        self.assertRaises(MissingMetricError, self.get_values_for_metric, 'pthread_time', convert_to_exclusive=True)
        self.assertRaises(MissingMetricError, self.get_values_for_metric, 'pthread_time', convert_to_inclusive=True)

    def test_pthread_management_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_management', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_management_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_management', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_synchronization_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_synchronization', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_synchronization_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_synchronization', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_mutex_api_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_mutex_api', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_mutex_api_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_mutex_api', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_cond_api_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_cond_api', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_cond_api_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_cond_api', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_overhead_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('overhead', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_overhead_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('overhead', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_idle_threads_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_idle_threads', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_idle_threads_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_idle_threads', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_limited_parallelism_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_limited_parallelism', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_limited_parallelism_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_limited_parallelism', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_visits_exclusive(self):
        correct_values = [64, 64, 64, 128, 64, 64, 128, 320, 64, 64, 128, 64, 64, 64, 64, 16064, 16064, 96384, 96384,
                          16064, 16064, 16064, 128512, 128512, 41373836, 112448, 112448, 112448, 112448, 449792, 112448,
                          128512, 112448, 112448, 112448, 112448, 112448, 16064, 128512, 128512, 41373836, 112448,
                          112448, 112448, 112448, 449792, 112448, 128512, 112448, 112448, 112448, 112448, 112448, 16064,
                          128512, 128512, 41373836, 112448, 112448, 112448, 112448, 449792, 112448, 128512, 112448,
                          112448, 112448, 112448, 112448, 16064, 128, 128, 64, 64, 64, 64, 64, 64, 64, 64, 384, 384, 64,
                          64, 64, 64, 64, 1, 64, ]
        metric_values = self.get_values_for_metric('visits', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_visits_inclusive(self):
        correct_values = [130325541, 512, 64, 128, 64, 64, 128, 320, 64, 64, 128, 64, 64, 64, 64, 130322212, 240960,
                          96384, 96384, 16064, 16064, 43349708, 41630860, 128512, 41373836, 224896, 112448, 224896,
                          112448, 449792, 112448, 128512, 224896, 112448, 224896, 112448, 112448, 43349708, 41630860,
                          128512, 41373836, 224896, 112448, 224896, 112448, 449792, 112448, 128512, 224896, 112448,
                          224896, 112448, 112448, 43349708, 41630860, 128512, 41373836, 224896, 112448, 224896, 112448,
                          449792, 112448, 128512, 224896, 112448, 224896, 112448, 112448, 16064, 128, 128, 64, 64, 64,
                          64, 1280, 128, 64, 960, 384, 384, 64, 64, 128, 64, 64, 1, 64, ]
        metric_values = self.get_values_for_metric('visits', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_rma_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_rma', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_rma_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_rma', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_fence_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_fence', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_fence_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_fence', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_access_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats_access', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_access_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats_access', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_exposure_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats_exposure', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_exposure_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats_exposure', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_locks_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_locks', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_locks_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_locks', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_puts_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma_puts', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_puts_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma_puts', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_gets_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma_gets', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_gets_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma_gets', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140389079040, 140389079040, 0, 0, 0,
                          0, 0, 0, 72974254080, 0, 0, 85136629760, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0,
                          72974254080, 0, 0, 85136629760, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0, 72974254080, 0,
                          0, 85136629760, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 0, 0,
                          559319040, 559319040, 0, 0, 327680, 1024, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_inclusive(self):
        correct_values = [792717235200, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 791597936640, 280778158080, 0,
                          140389079040, 140389079040, 0, 170273259520, 0, 0, 0, 72974254080, 72974254080, 0, 0,
                          85136629760, 0, 0, 12162375680, 12162375680, 0, 0, 0, 170273259520, 0, 0, 0, 72974254080,
                          72974254080, 0, 0, 85136629760, 0, 0, 12162375680, 12162375680, 0, 0, 0, 170273259520, 0, 0,
                          0, 72974254080, 72974254080, 0, 0, 85136629760, 0, 0, 12162375680, 12162375680, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 1119293440, 327680, 327680, 1118638080, 0, 559319040, 559319040, 0, 327680,
                          327680, 1024, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_p2p_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140389079040, 140389079040, 0, 0, 0, 0,
                          0, 0, 72974254080, 0, 0, 85136629760, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0,
                          72974254080, 0, 0, 85136629760, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0, 72974254080, 0,
                          0, 85136629760, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 559319040,
                          559319040, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_p2p', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_p2p_inclusive(self):
        correct_values = [792716574720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 791597936640, 280778158080, 0,
                          140389079040, 140389079040, 0, 170273259520, 0, 0, 0, 72974254080, 72974254080, 0, 0,
                          85136629760, 0, 0, 12162375680, 12162375680, 0, 0, 0, 170273259520, 0, 0, 0, 72974254080,
                          72974254080, 0, 0, 85136629760, 0, 0, 12162375680, 12162375680, 0, 0, 0, 170273259520, 0, 0,
                          0, 72974254080, 72974254080, 0, 0, 85136629760, 0, 0, 12162375680, 12162375680, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 1118638080, 0, 0, 1118638080, 0, 559319040, 559319040, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_p2p', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_sent_p2p_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140389079040, 0, 0, 0, 0, 0, 0, 0,
                          72974254080, 0, 0, 0, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0, 72974254080, 0, 0, 0, 0,
                          0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0, 72974254080, 0, 0, 0, 0, 0, 0, 12162375680, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 559319040, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_sent_p2p', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_sent_p2p_inclusive(self):
        correct_values = [396358287360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 395798968320, 140389079040, 0,
                          140389079040, 0, 0, 85136629760, 0, 0, 0, 72974254080, 72974254080, 0, 0, 0, 0, 0,
                          12162375680, 12162375680, 0, 0, 0, 85136629760, 0, 0, 0, 72974254080, 72974254080, 0, 0, 0, 0,
                          0, 12162375680, 12162375680, 0, 0, 0, 85136629760, 0, 0, 0, 72974254080, 72974254080, 0, 0, 0,
                          0, 0, 12162375680, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 559319040, 0, 0, 559319040, 0,
                          559319040, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_sent_p2p', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_received_p2p_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140389079040, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 85136629760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 559319040, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_received_p2p', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_received_p2p_inclusive(self):
        correct_values = [396358287360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 395798968320, 140389079040, 0, 0,
                          140389079040, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0,
                          85136629760, 0, 0, 0, 0, 0, 0, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0, 85136629760, 0, 0, 0, 0,
                          0, 0, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 559319040, 0, 0, 559319040, 0,
                          0, 559319040, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_received_p2p', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_coll_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 0, 0, 0, 0, 0, 0, 327680, 1024, 0,
                          0, ]
        metric_values = self.get_values_for_metric('bytes_coll', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_coll_inclusive(self):
        correct_values = [660480, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 655360, 327680, 327680, 0, 0, 0, 0, 0, 327680,
                          327680, 1024, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_coll', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_sent_coll_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 163840, 512, 0,
                          0, ]
        metric_values = self.get_values_for_metric('bytes_sent_coll', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_sent_coll_inclusive(self):
        correct_values = [330240, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 163840, 163840, 0, 0, 0, 0, 0, 163840,
                          163840, 512, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_sent_coll', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_received_coll_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 163840, 512, 0,
                          0, ]
        metric_values = self.get_values_for_metric('bytes_received_coll', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_received_coll_inclusive(self):
        correct_values = [330240, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 163840, 163840, 0, 0, 0, 0, 0, 163840,
                          163840, 512, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_received_coll', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_rma_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_rma', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_rma_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_rma', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_put_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_put', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_put_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_put', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_get_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_get', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_get_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_get', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_ops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_ops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_ops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_ops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_iops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_iops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_iops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_iops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_irops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_irops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_irops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_irops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_iwops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_iwops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_iwops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_iwops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_cops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_cops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_cops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_cops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_crops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_crops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_crops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_crops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_cwops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_cwops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_cwops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_cwops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_exclusive(self):
        correct_values = [0.002915371250054477, 8.417916249997145E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          4.4878743750000007E-4, 1.8868981249999997E-4, 0.2451688848437497, 3.378124999999999E-5,
                          0.04065564737499988, 0.1717191157187501, 4.780593750000001E-5, 0.007396258250196297,
                          4.537898527125066, 0.0, 0.0, 0.0, 11.931268382999974, 0.04978234456245545, 8.796401677624933,
                          0.04080807699999998, 0.12084803043749995, 3.301016205906249, 0.0, 0.005300265999999991, 0.0,
                          0.0, 1.0966404988749998, 2.685500097374991, 0.3203910962500002, 0.0, 0.005895951000000002,
                          0.0, 0.10848427062499999, 0.07522388646873068, 9.58999653925001, 0.04051025650000001,
                          0.24258554378125002, 2.873313885000001, 0.0, 0.004499865000000007, 0.0, 0.0, 1.159391837,
                          7.078596424125006, 0.18436233125000007, 0.0, 0.006746707250000008, 0.0, 0.13920840375000007,
                          0.08158178153122364, 17.40762919606234, 0.05911604374999999, 0.10079433850000001,
                          2.395879733250001, 0.0, 0.005516921500000006, 0.0, 0.0, 1.6042421348125, 6.840468026906237,
                          0.09653270978124992, 0.0, 0.006489084374999995, 0.0, 0.10823631128125005, 2.9824421168749993,
                          1.1610956249999997E-4, 0.0, 4.2027006250000017E-4, 5.172499999999998E-5, 3.57309375E-5,
                          2.3659374999999993E-6, 2.4676946875037964E-4, 0.026949643999999794, 0.0, 0.006902847624999778,
                          0.0, 0.0, 0.0, 0.06369763750000018, 0.030181561718749993, 0.0, 0.0, 1.2617718750000009E-4,
                          0.0, ]
        metric_values = self.get_values_for_metric('imbalance', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_inclusive(self):
        correct_values = [86.68174647628122, 8.417916249997145E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.4878743750000007E-4,
                          1.8868981249999997E-4, 0.2451688848437497, 3.378124999999999E-5, 0.04065564737499988,
                          0.1717191157187501, 4.780593750000001E-5, 86.09099576203116, 16.46916691012504, 0.0, 0.0, 0.0,
                          11.931268382999974, 16.531068515656127, 8.958057785062433, 0.04080807699999998,
                          0.12084803043749995, 3.301016205906249, 0.0, 0.005300265999999991, 0.0, 0.0,
                          1.0966404988749998, 2.685500097374991, 0.3203910962500002, 0.0, 0.005895951000000002, 0.0,
                          0.10848427062499999, 21.394435679374997, 9.87309233953126, 0.04051025650000001,
                          0.24258554378125002, 2.873313885000001, 0.0, 0.004499865000000007, 0.0, 0.0, 1.159391837,
                          7.078596424125006, 0.18436233125000007, 0.0, 0.006746707250000008, 0.0, 0.13920840375000007,
                          28.706486281749807, 17.567539578312342, 0.05911604374999999, 0.10079433850000001,
                          2.395879733250001, 0.0, 0.005516921500000006, 0.0, 0.0, 1.6042421348125, 6.840468026906237,
                          0.09653270978124992, 0.0, 0.006489084374999995, 0.0, 0.10823631128125005, 2.9824421168749993,
                          1.1610956249999997E-4, 0.0, 4.2027006250000017E-4, 5.172499999999998E-5, 3.57309375E-5,
                          2.3659374999999993E-6, 0.12797846031250013, 0.026949643999999794, 0.0, 0.07060048512499996,
                          0.0, 0.0, 0.0, 0.06369763750000018, 0.030181561718749993, 0.0, 0.0, 1.2617718750000009E-4,
                          0.0, ]
        metric_values = self.get_values_for_metric('imbalance', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_above_exclusive(self):
        correct_values = [0.001457685625020133, 4.208958124998572E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          2.2439371874999995E-4, 9.434490625000005E-5, 0.12258444242187505, 1.6890625E-5,
                          0.020327823687499746, 0.0858595578593746, 2.3902968749999994E-5, 0.003698129125091043,
                          2.2689492635625257, 0.0, 0.0, 0.0, 5.965634191499717, 0.024891172281231277, 4.39820083881297,
                          0.0204040385, 0.06042401521875011, 1.6505081029531277, 0.0, 0.0026501329999999938, 0.0, 0.0,
                          0.5483202494374992, 1.3427500486875665, 0.16019554812499973, 0.0, 0.002947975499999999, 0.0,
                          0.05424213531250003, 0.03761194323436534, 4.794998269625197, 0.020255128249999973,
                          0.12129277189062497, 1.4366569425000004, 0.0, 0.0022499325000000063, 0.0, 0.0,
                          0.5796959185000006, 3.539298212062505, 0.09218116562500003, 0.0, 0.003373353625000009, 0.0,
                          0.06960420187499994, 0.04079089076560294, 8.703814598031434, 0.02955802187500001,
                          0.0503971692499999, 1.197939866624999, 0.0, 0.0027584607500000043, 0.0, 0.0,
                          0.8021210674062496, 3.420234013453065, 0.04826635489062487, 0.0, 0.0032445421874999856, 0.0,
                          0.05411815564062517, 1.491221058437505, 5.805478125000002E-5, 0.0, 2.101350312500001E-4,
                          2.5862500000000005E-5, 1.7865468750000003E-5, 1.1829687500000005E-6, 1.2338473437518982E-4,
                          0.013474822000000067, 0.0, 0.0034514238124998126, 0.0, 0.0, 0.0, 0.03184881874999973,
                          0.015090780859375003, 0.0, 0.0, 6.308859375E-5, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_above', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_above_inclusive(self):
        correct_values = [43.3408732381413, 4.208958124998572E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2439371874999995E-4,
                          9.434490625000005E-5, 0.12258444242187505, 1.6890625E-5, 0.020327823687499746,
                          0.0858595578593746, 2.3902968749999994E-5, 43.045497881016274, 8.234583455062243, 0.0, 0.0,
                          0.0, 5.965634191499717, 8.265534257828644, 4.47902889253172, 0.0204040385,
                          0.06042401521875011, 1.6505081029531277, 0.0, 0.0026501329999999938, 0.0, 0.0,
                          0.5483202494374992, 1.3427500486875665, 0.16019554812499973, 0.0, 0.002947975499999999, 0.0,
                          0.05424213531250003, 10.697217839687694, 4.936546169765823, 0.020255128249999973,
                          0.12129277189062497, 1.4366569425000004, 0.0, 0.0022499325000000063, 0.0, 0.0,
                          0.5796959185000006, 3.539298212062505, 0.09218116562500003, 0.0, 0.003373353625000009, 0.0,
                          0.06960420187499994, 14.353243140875101, 8.783769789156434, 0.02955802187500001,
                          0.0503971692499999, 1.197939866624999, 0.0, 0.0027584607500000043, 0.0, 0.0,
                          0.8021210674062496, 3.420234013453065, 0.04826635489062487, 0.0, 0.0032445421874999856, 0.0,
                          0.05411815564062517, 1.491221058437505, 5.805478125000002E-5, 0.0, 2.101350312500001E-4,
                          2.5862500000000005E-5, 1.7865468750000003E-5, 1.1829687500000005E-6, 0.0639892301562498,
                          0.013474822000000067, 0.0, 0.03530024256249954, 0.0, 0.0, 0.0, 0.03184881874999973,
                          0.015090780859375003, 0.0, 0.0, 6.308859375E-5, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_above', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_above_single_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_above_single', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_above_single_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_above_single', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_exclusive(self):
        correct_values = [0.0014576856250272385, 4.2089581249985723E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          2.2439371874999992E-4, 9.434490624999995E-5, 0.12258444242187466, 1.6890625000000002E-5,
                          0.020327823687500135, 0.08585955785937549, 2.3902968750000004E-5, 0.0036981291250981485,
                          2.268949263562538, 0.0, 0.0, 0.0, 5.965634191500257, 0.0248911722812295, 4.39820083881196,
                          0.0204040385, 0.060424015218749835, 1.6505081029531232, 0.0, 0.002650133, 0.0, 0.0,
                          0.5483202494375006, 1.3427500486874244, 0.16019554812500036, 0.0, 0.0029479755000000035, 0.0,
                          0.054242135312499974, 0.037611943234368894, 4.794998269624812, 0.02025512825000004,
                          0.12129277189062501, 1.4366569424999995, 0.0, 0.002249932500000001, 0.0, 0.0,
                          0.5796959184999995, 3.5392982120625014, 0.09218116562499996, 0.0, 0.0033733536249999987, 0.0,
                          0.06960420187500008, 0.04079089076560294, 8.703814598030917, 0.029558021874999972,
                          0.05039716925000011, 1.1979398666250014, 0.0, 0.002758460750000001, 0.0, 0.0,
                          0.8021210674062507, 3.4202340134531717, 0.04826635489062504, 0.0, 0.003244542187500009, 0.0,
                          0.054118155640624846, 1.4912210584374943, 5.805478124999997E-5, 0.0, 2.1013503124999992E-4,
                          2.5862499999999995E-5, 1.7865468749999996E-5, 1.1829687499999986E-6, 1.2338473437517594E-4,
                          0.013474821999999727, 0.0, 0.003451423812499972, 0.0, 0.0, 0.0, 0.03184881875000045,
                          0.01509078085937499, 0.0, 0.0, 6.308859375000007E-5, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_inclusive(self):
        correct_values = [43.340873238139906, 4.2089581249985723E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          2.2439371874999992E-4, 9.434490624999995E-5, 0.12258444242187466, 1.6890625000000002E-5,
                          0.020327823687500135, 0.08585955785937549, 2.3902968750000004E-5, 43.045497881014875,
                          8.234583455062795, 0.0, 0.0, 0.0, 5.965634191500257, 8.265534257827486, 4.479028892530709,
                          0.0204040385, 0.060424015218749835, 1.6505081029531232, 0.0, 0.002650133, 0.0, 0.0,
                          0.5483202494375006, 1.3427500486874244, 0.16019554812500036, 0.0, 0.0029479755000000035, 0.0,
                          0.054242135312499974, 10.697217839687307, 4.936546169765437, 0.02025512825000004,
                          0.12129277189062501, 1.4366569424999995, 0.0, 0.002249932500000001, 0.0, 0.0,
                          0.5796959184999995, 3.5392982120625014, 0.09218116562499996, 0.0, 0.0033733536249999987, 0.0,
                          0.06960420187500008, 14.353243140874694, 8.783769789155917, 0.029558021874999972,
                          0.05039716925000011, 1.1979398666250014, 0.0, 0.002758460750000001, 0.0, 0.0,
                          0.8021210674062507, 3.4202340134531717, 0.04826635489062504, 0.0, 0.003244542187500009, 0.0,
                          0.054118155640624846, 1.4912210584374943, 5.805478124999997E-5, 0.0, 2.1013503124999992E-4,
                          2.5862499999999995E-5, 1.7865468749999996E-5, 1.1829687499999986E-6, 0.06398923015625031,
                          0.013474821999999727, 0.0, 0.035300242562500424, 0.0, 0.0, 0.0, 0.03184881875000045,
                          0.01509078085937499, 0.0, 0.0, 6.308859375000007E-5, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_bypass_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below_bypass', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_bypass_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below_bypass', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_singularity_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below_singularity', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_singularity_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below_singularity', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_min_time_exclusive(self):
        correct_values = [481.363762242, 0.486387404, 0.486017553, 2.7E-7, 2.87E-7, 1.36254E-4, 4.1014E-5, 1.447E-6,
                          1.8353E-5, 9.202E-6, 0.244777392, 7.42E-7, 0.085478883, 0.305027305, 1.243E-6, 1.899401576,
                          0.330569614, 1.08E-6, 2.979E-6, 0.008680323, 0.309229857, 0.46218046, 0.043231753, 3.224E-6,
                          1.5E-7, 2.60183E-4, 5.091E-6, 1.979E-6, 1.464E-6, 6.64E-7, 2.82968E-4, 0.009884839, 5.7756E-5,
                          4.96E-6, 1.925E-6, 1.504E-6, 1.335E-5, 0.539904005, 0.054624339, 2.687E-6, 1.44E-7,
                          1.51278E-4, 5.458E-6, 2.023E-6, 1.531E-6, 6.45E-7, 1.18848E-4, 0.006855728, 3.0827E-5,
                          4.993E-6, 1.945E-6, 1.552E-6, 1.2207E-5, 0.512207205, 0.051440963, 2.624E-6, 1.47E-7,
                          1.41149E-4, 5.236E-6, 2.029E-6, 1.545E-6, 6.83E-7, 1.10348E-4, 0.00737433, 1.9044E-5, 4.54E-6,
                          2.088E-6, 1.653E-6, 1.2367E-5, 0.023581053, 1.89E-7, 1.4254E-5, 1.4312E-5, 1.213E-6, 1.289E-6,
                          2.16E-7, 0.402302214, 0.039805483, 4.0592E-5, 0.34535417, 1.217E-6, 3.814E-6, 0.016830189,
                          0.314566702, 0.008749059, 1.9008E-5, 1.64134E-4, 0.0, 9.2372E-5, ]
        metric_values = self.get_values_for_metric('min_time', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_min_time_inclusive(self):
        correct_values = [0.0, 2.7E-7, 0.486017553, 2.7E-7, 2.87E-7, 1.36254E-4, 4.1014E-5, 1.447E-6, 1.8353E-5,
                          9.202E-6, 0.244777392, 7.42E-7, 0.085478883, 0.305027305, 1.243E-6, 1.44E-7, 1.08E-6, 1.08E-6,
                          2.979E-6, 0.008680323, 0.309229857, 1.5E-7, 1.5E-7, 3.224E-6, 1.5E-7, 5.091E-6, 5.091E-6,
                          1.464E-6, 1.464E-6, 6.64E-7, 2.82968E-4, 0.009884839, 4.96E-6, 4.96E-6, 1.504E-6, 1.504E-6,
                          1.335E-5, 1.44E-7, 1.44E-7, 2.687E-6, 1.44E-7, 5.458E-6, 5.458E-6, 1.531E-6, 1.531E-6,
                          6.45E-7, 1.18848E-4, 0.006855728, 4.993E-6, 4.993E-6, 1.552E-6, 1.552E-6, 1.2207E-5, 1.47E-7,
                          1.47E-7, 2.624E-6, 1.47E-7, 5.236E-6, 5.236E-6, 1.545E-6, 1.545E-6, 6.83E-7, 1.10348E-4,
                          0.00737433, 4.54E-6, 4.54E-6, 1.653E-6, 1.653E-6, 1.2367E-5, 0.023581053, 1.89E-7, 1.4254E-5,
                          1.4312E-5, 1.213E-6, 1.289E-6, 2.16E-7, 1.217E-6, 4.0592E-5, 4.0592E-5, 1.217E-6, 1.217E-6,
                          3.814E-6, 0.016830189, 0.314566702, 1.9008E-5, 1.9008E-5, 1.64134E-4, 0.0, 9.2372E-5, ]
        metric_values = self.get_values_for_metric('min_time', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_max_time_exclusive(self):
        correct_values = [481.373014393, 0.495449066, 0.495045981, 2.717E-6, 3.98E-7, 2.25335E-4, 5.9826E-5, 4.32223E-4,
                          6.433E-5, 2.9585E-5, 0.260928964, 2.669E-6, 0.088738437, 0.319643923, 6.712E-6, 1.935333732,
                          0.362726966, 1.11304E-4, 5.6308E-5, 0.030375892, 0.325360089, 0.495435393, 0.052058737,
                          9.4447E-5, 2.47477E-4, 8.27302E-4, 6.4872E-5, 6.4104E-5, 6.2453E-5, 0.020295242, 6.06408E-4,
                          0.014442285, 2.41545E-4, 4.3155E-5, 2.3464E-5, 2.278E-5, 1.76097E-4, 0.569077333, 0.081978073,
                          4.5351E-5, 2.20382E-4, 6.23602E-4, 5.6691E-5, 6.0191E-5, 5.9166E-5, 0.024070928, 0.00134239,
                          0.012954849, 1.1905E-4, 4.9865E-5, 4.4491E-5, 4.3708E-5, 1.92136E-4, 0.543702376, 0.061236482,
                          6.2682E-5, 4.79746E-4, 8.64636E-4, 6.0667E-5, 4.7831E-5, 4.6411E-5, 0.022875083, 5.26985E-4,
                          0.01377687, 2.13694E-4, 1.82742E-4, 7.8122E-5, 7.713E-5, 9.0827E-5, 0.034411979, 1.2931E-5,
                          0.016726416, 5.4082E-5, 5.185E-6, 4.468E-6, 5.76E-7, 0.4068152, 0.044321662, 0.004905209,
                          0.353762647, 2.7551E-5, 1.7706E-5, 0.020128222, 0.320426515, 0.017163662, 0.006945608,
                          3.38217E-4, 6.409E-5, 1.18337E-4, ]
        metric_values = self.get_values_for_metric('max_time', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_max_time_inclusive(self):
        correct_values = [481.373014393, 0.495449066, 0.495045981, 2.717E-6, 3.98E-7, 2.25335E-4, 5.9826E-5, 4.32223E-4,
                          6.433E-5, 2.9585E-5, 0.260928964, 2.669E-6, 0.088738437, 0.319643923, 6.712E-6, 1.935333732,
                          0.362726966, 1.11304E-4, 5.6308E-5, 0.030375892, 0.325360089, 0.495435393, 0.052058737,
                          9.4447E-5, 2.47477E-4, 8.27302E-4, 6.4872E-5, 6.4104E-5, 6.2453E-5, 0.020295242, 6.06408E-4,
                          0.014442285, 2.41545E-4, 4.3155E-5, 2.3464E-5, 2.278E-5, 1.76097E-4, 0.569077333, 0.081978073,
                          4.5351E-5, 2.20382E-4, 6.23602E-4, 5.6691E-5, 6.0191E-5, 5.9166E-5, 0.024070928, 0.00134239,
                          0.012954849, 1.1905E-4, 4.9865E-5, 4.4491E-5, 4.3708E-5, 1.92136E-4, 0.543702376, 0.061236482,
                          6.2682E-5, 4.79746E-4, 8.64636E-4, 6.0667E-5, 4.7831E-5, 4.6411E-5, 0.022875083, 5.26985E-4,
                          0.01377687, 2.13694E-4, 1.82742E-4, 7.8122E-5, 7.713E-5, 9.0827E-5, 0.034411979, 1.2931E-5,
                          0.016726416, 5.4082E-5, 5.185E-6, 4.468E-6, 5.76E-7, 0.4068152, 0.044321662, 0.004905209,
                          0.353762647, 2.7551E-5, 1.7706E-5, 0.020128222, 0.320426515, 0.017163662, 0.006945608,
                          3.38217E-4, 6.409E-5, 1.18337E-4, ]
        metric_values = self.get_values_for_metric('max_time', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_task_migration_loss_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('task_migration_loss', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_task_migration_loss_inclusive(self):
        correct_values = [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('task_migration_loss', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_task_migration_win_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('task_migration_win', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_task_migration_win_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('task_migration_win', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)


if __name__ == '__main__':
    unittest.main()
