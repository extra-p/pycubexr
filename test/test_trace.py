import unittest
from pathlib import Path
from unittest import SkipTest

from pycubexr import CubexParser
from pycubexr.utils.exceptions import MissingMetricError


class TestMetricValuesTrace(unittest.TestCase):
    cubex: CubexParser = None

    @classmethod
    def setUpClass(cls) -> None:
        try:
            cubex_file_path = Path("../data/cube_samples/trace.cubex").resolve()
            cls.cubex = CubexParser(cubex_file_path).__enter__()
            cls.all_cnodes = list(sorted(cls.cubex.all_cnodes(), key=lambda c: c.id))
        except FileNotFoundError as err:
            raise SkipTest("Required test file was not found.") from err

    @classmethod
    def tearDownClass(cls) -> None:
        cls.cubex.__exit__(None, None, None)

    def get_values_for_metric(self, name, convert_to_exclusive=False, convert_to_inclusive=False):
        metric = self.cubex.get_metric_by_name(name)
        metric_values = self.cubex.get_metric_values(metric)
        # iterate over all callpaths in cubex file
        cnode_values = []
        for cnode in self.all_cnodes:
            # return the measurement values for all mpi processes for the current metric and callpath
            cnode_values.append(metric_values.value(cnode, convert_to_exclusive, convert_to_inclusive))
        return cnode_values

    def test_time_exclusive(self):
        correct_values = [0.031500900666287635, 0.009104130000004318, 31.29664904, 6.259200000002796E-5,
                          1.3888000000572553E-5, 0.006084251999999735, 0.005128418000000745, 0.037955000331814426,
                          0.0024894971047804137, 0.0012345576543005832, 31.83827501667305, 4.282100000019273E-5,
                          5.602720073000001, 19.853103168000004, 7.857700000091228E-5, 0.11898902673419798,
                          214.4672933827169, 0.9170730600005448, 1.2074014970006888, 256.4063859539993, 5093.625744161,
                          0.7953621740280141, 5809.550530217022, 0.9240478419956504, 43.33029046699607,
                          1.2983958860111522, 0.06001862999249319, 0.5368152740016017, 143.66969102798737,
                          38.52612762000098, 8.375889268985464, 1424.951566113004, 8.62069730899755, 1.132289014993593,
                          0.05973915798450968, 0.531071308005012, 2.4695465249977424, 0.9288990390214167,
                          7379.115961269965, 0.8266615750046409, 31.792516876999233, 1.9254478609992178,
                          0.06395409498943572, 0.9247005769990966, 205.0222488690045, 23.275343941996255,
                          8.284866206022343, 1144.5217004629972, 5.672174240007719, 2.1353252759966277,
                          0.0736133340144618, 0.9980863499880197, 3.1018909909947836, 0.8889513799531414,
                          6944.555236002069, 0.8083149569982364, 27.381958040004186, 1.7770466339989017,
                          0.0636454680005647, 0.8499905879919236, 186.79153055902245, 21.20267887899606,
                          8.968496231938495, 1171.443271866011, 3.2909981440065303, 1.9859988259910244,
                          0.07038108598686232, 0.9389768680102062, 3.079232707019843, 461.199187315003,
                          4.487685008669473E-5, 0.7781110122599095, 0.0021490395093897163, 4.285700003947568E-5,
                          1.1344200021312645E-4, 8.24099998908423E-6, 9.144973567458692E-4, 2.533349717931685,
                          0.1575282435953227, 0.8423280308346648, 0.001667225000403505, 0.004110125999943648,
                          1.172201157999666, 20.333272820000275, 0.6208765839787702, 0.13674938280041715,
                          0.013688308170969776, 6.379136209488934E-5, 0.007278622425815229, ]
        metric_values = self.get_values_for_metric('time', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_time_inclusive(self):
        correct_values = [30810.823191339958, 31.317042320000006, 31.29664904, 6.259200000002796E-5,
                          1.3888000000572553E-5, 0.006084251999999735, 0.005128418000000745, 0.037955000331814426,
                          0.0024894971047804137, 0.0012345576543005832, 31.83827501667305, 4.282100000019273E-5,
                          5.602720073000001, 19.853103168000004, 7.857700000091228E-5, 30695.53425143245,
                          5566.623898054717, 0.9170730600005448, 1.2074014970006888, 256.4063859539993, 5093.625744161,
                          7484.832077835003, 5818.850467328003, 0.9240478419956504, 44.62868635300722,
                          1.2983958860111522, 0.5968339039940949, 0.5368152740016017, 143.66969102798737,
                          38.52612762000098, 8.375889268985464, 1424.951566113004, 9.752986323991141, 1.132289014993593,
                          0.5908104659895217, 0.531071308005012, 2.4695465249977424, 8808.663390964997,
                          7388.227489050992, 0.8266615750046409, 33.71796473799845, 1.9254478609992178,
                          0.9886546719885323, 0.9247005769990966, 205.0222488690045, 23.275343941996255,
                          8.284866206022343, 1144.5217004629972, 7.807499516004346, 2.1353252759966277,
                          1.0716996840024815, 0.9980863499880197, 3.1018909909947836, 8374.096708235998,
                          6954.332047191006, 0.8083149569982364, 29.15900467400309, 1.7770466339989017,
                          0.9136360559924883, 0.8499905879919236, 186.79153055902245, 21.20267887899606,
                          8.968496231938495, 1171.443271866011, 5.276996969997555, 1.9859988259910244,
                          1.0093579539970685, 0.9389768680102062, 3.079232707019843, 461.199187315003,
                          4.487685008669473E-5, 0.7781110122599095, 0.0021490395093897163, 4.285700003947568E-5,
                          1.1344200021312645E-4, 8.24099998908423E-6, 25.802997785497894, 2.6908779615270078,
                          0.1575282435953227, 22.353579359834953, 0.001667225000403505, 0.004110125999943648,
                          1.172201157999666, 20.333272820000275, 0.7576259667791874, 0.13674938280041715,
                          0.013688308170969776, 6.379136209488934E-5, 0.007278622425815229, ]
        metric_values = self.get_values_for_metric('time', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_execution_exclusive(self):
        correct_values = [0.031500900666287635, 0.009104130000004318, 31.29664904, 6.259200000002796E-5,
                          1.3888000000572553E-5, 0.006084251999999735, 0.005128418000000745, 0.037955000331814426,
                          0.0024894971047804137, 0.0012345576543005832, 31.83827501667305, 4.282100000019273E-5,
                          5.602720073000001, 19.853103168000004, 7.857700000091228E-5, 0.11898902673419798,
                          214.4672933827169, 0.9170730600005448, 1.2074014970006888, 256.4063859539993, 5093.625744161,
                          0.7953621740280141, 5809.550530217022, 0.9240478419956504, 43.33029046699607,
                          1.2983958860111522, 0.06001862999249319, 0.5368152740016017, 143.66969102798737,
                          38.52612762000098, 8.375889268985464, 1424.951566113004, 8.62069730899755, 1.132289014993593,
                          0.05973915798450968, 0.531071308005012, 2.4695465249977424, 0.9288990390214167,
                          7379.115961269965, 0.8266615750046409, 31.792516876999233, 1.9254478609992178,
                          0.06395409498943572, 0.9247005769990966, 205.0222488690045, 23.275343941996255,
                          8.284866206022343, 1144.5217004629972, 5.672174240007719, 2.1353252759966277,
                          0.0736133340144618, 0.9980863499880197, 3.1018909909947836, 0.8889513799531414,
                          6944.555236002069, 0.8083149569982364, 27.381958040004186, 1.7770466339989017,
                          0.0636454680005647, 0.8499905879919236, 186.79153055902245, 21.20267887899606,
                          8.968496231938495, 1171.443271866011, 3.2909981440065303, 1.9859988259910244,
                          0.07038108598686232, 0.9389768680102062, 3.079232707019843, 461.199187315003,
                          4.487685008669473E-5, 0.7781110122599095, 0.0021490395093897163, 4.285700003947568E-5,
                          1.1344200021312645E-4, 8.24099998908423E-6, 9.144973567458692E-4, 2.533349717931685,
                          0.1575282435953227, 0.8423280308346648, 0.001667225000403505, 0.004110125999943648,
                          1.172201157999666, 20.333272820000275, 0.6208765839787702, 0.13674938280041715,
                          0.013688308170969776, 6.379136209488934E-5, 0.007278622425815229, ]
        metric_values = self.get_values_for_metric('execution', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_execution_inclusive(self):
        correct_values = [30810.823191339958, 31.317042320000006, 31.29664904, 6.259200000002796E-5,
                          1.3888000000572553E-5, 0.006084251999999735, 0.005128418000000745, 0.037955000331814426,
                          0.0024894971047804137, 0.0012345576543005832, 31.83827501667305, 4.282100000019273E-5,
                          5.602720073000001, 19.853103168000004, 7.857700000091228E-5, 30695.53425143245,
                          5566.623898054717, 0.9170730600005448, 1.2074014970006888, 256.4063859539993, 5093.625744161,
                          7484.832077835003, 5818.850467328003, 0.9240478419956504, 44.62868635300722,
                          1.2983958860111522, 0.5968339039940949, 0.5368152740016017, 143.66969102798737,
                          38.52612762000098, 8.375889268985464, 1424.951566113004, 9.752986323991141, 1.132289014993593,
                          0.5908104659895217, 0.531071308005012, 2.4695465249977424, 8808.663390964997,
                          7388.227489050992, 0.8266615750046409, 33.71796473799845, 1.9254478609992178,
                          0.9886546719885323, 0.9247005769990966, 205.0222488690045, 23.275343941996255,
                          8.284866206022343, 1144.5217004629972, 7.807499516004346, 2.1353252759966277,
                          1.0716996840024815, 0.9980863499880197, 3.1018909909947836, 8374.096708235998,
                          6954.332047191006, 0.8083149569982364, 29.15900467400309, 1.7770466339989017,
                          0.9136360559924883, 0.8499905879919236, 186.79153055902245, 21.20267887899606,
                          8.968496231938495, 1171.443271866011, 5.276996969997555, 1.9859988259910244,
                          1.0093579539970685, 0.9389768680102062, 3.079232707019843, 461.199187315003,
                          4.487685008669473E-5, 0.7781110122599095, 0.0021490395093897163, 4.285700003947568E-5,
                          1.1344200021312645E-4, 8.24099998908423E-6, 25.802997785497894, 2.6908779615270078,
                          0.1575282435953227, 22.353579359834953, 0.001667225000403505, 0.004110125999943648,
                          1.172201157999666, 20.333272820000275, 0.7576259667791874, 0.13674938280041715,
                          0.013688308170969776, 6.379136209488934E-5, 0.007278622425815229, ]
        metric_values = self.get_values_for_metric('execution', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_exclusive(self):
        correct_values = [4.547473508864641E-13, 1.0658141036401503E-14, 31.29664904, 6.259200000002796E-5,
                          1.3888000000572553E-5, 0.006084251999999735, 0.005128418000000745, 0.037955000331814426, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.547473508864641E-13, 5.6843418860808015E-14,
                          0.9170730600005448, 1.2074014970006888, 256.4063859539993, 0.0, -5.6843418860808015E-14, 0.0,
                          0.0, 0.0, 1.2983958860111522, 0.0, 0.5368152740016017, 143.66969102798737, 0.0, 0.0, 0.0, 0.0,
                          1.132289014993593, 0.0, 0.531071308005012, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9254478609992178, 0.0,
                          0.9247005769990966, 205.0222488690045, 0.0, 0.0, 0.0, 0.0, 2.1353252759966277, 0.0,
                          0.9980863499880197, 0.0, 2.8421709430404007E-14, 0.0, 0.0, 0.0, 1.7770466339989017, 0.0,
                          0.8499905879919236, 186.79153055902245, 0.0, 0.0, 0.0, 0.0, 1.9859988259910244, 0.0,
                          0.9389768680102062, 0.0, 0.0, 0.0, 0.7781110122599095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.1575282435953227, 0.0, 0.001667225000403505, 0.004110125999943648, 1.172201157999666, 0.0,
                          0.0, 0.13674938280041715, 0.013688308170969776, 0.0, 0.007278622425815229, ]
        metric_values = self.get_values_for_metric('mpi', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_inclusive(self):
        correct_values = [842.6657026985855, 31.307938190000012, 31.29664904, 6.259200000002796E-5,
                          1.3888000000572553E-5, 0.006084251999999735, 0.005128418000000745, 0.037955000331814426, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 809.0484754300007, 258.5308605110006, 0.9170730600005448,
                          1.2074014970006888, 256.4063859539993, 0.0, 147.1682625109987, 0.0, 0.0, 1.2983958860111522,
                          1.2983958860111522, 0.5368152740016017, 0.5368152740016017, 143.66969102798737, 0.0, 0.0, 0.0,
                          1.132289014993593, 1.132289014993593, 0.531071308005012, 0.531071308005012, 0.0,
                          211.00580893298746, 0.0, 0.0, 1.9254478609992178, 1.9254478609992178, 0.9247005769990966,
                          0.9247005769990966, 205.0222488690045, 0.0, 0.0, 0.0, 2.1353252759966277, 2.1353252759966277,
                          0.9980863499880197, 0.9980863499880197, 0.0, 192.34354347501454, 0.0, 0.0, 1.7770466339989017,
                          1.7770466339989017, 0.8499905879919236, 0.8499905879919236, 186.79153055902245, 0.0, 0.0, 0.0,
                          1.9859988259910244, 1.9859988259910244, 0.9389768680102062, 0.9389768680102062, 0.0, 0.0, 0.0,
                          0.7781110122599095, 0.0, 0.0, 0.0, 0.0, 1.472256135395753, 0.1575282435953227,
                          0.1575282435953227, 1.1779785090000132, 0.001667225000403505, 0.004110125999943648,
                          1.172201157999666, 0.0, 0.13674938280041715, 0.13674938280041715, 0.013688308170969776, 0.0,
                          0.007278622425815229, ]
        metric_values = self.get_values_for_metric('mpi', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_synchronization_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7781110122599095, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_synchronization', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_synchronization_inclusive(self):
        correct_values = [0.7781110122599095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.7781110122599095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_synchronization', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_sync_collective_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7781110122599095, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_sync_collective', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_sync_collective_inclusive(self):
        correct_values = [0.7781110122599095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.7781110122599095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_sync_collective', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_barrier_wait_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.77450699056606, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_barrier_wait', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_barrier_wait_inclusive(self):
        correct_values = [0.77450699056606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.77450699056606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_barrier_wait', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_barrier_completion_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0016619494978336036,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_barrier_completion', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_barrier_completion_inclusive(self):
        correct_values = [0.0016619494978336036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0016619494978336036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_barrier_completion', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_synchronization_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_synchronization', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_synchronization_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_synchronization', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_active_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_active', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_active_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_active', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_late_post_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_late_post', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_late_post_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_late_post', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_wait_at_fence_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_wait_at_fence', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_wait_at_fence_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_wait_at_fence', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_early_fence_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_early_fence', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_early_fence_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_early_fence', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_early_wait_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_early_wait', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_early_wait_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_early_wait', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_late_complete_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_late_complete', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_late_complete_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_late_complete', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_passive_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_passive', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_passive_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_passive', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_lock_competition_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_lock_competition', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_lock_competition_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_lock_competition', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_wait_at_create_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_wait_at_create', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_wait_at_create_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_wait_at_create', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_wait_for_progress_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_wait_for_progress', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_sync_wait_for_progress_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_sync_wait_for_progress', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_wait_at_free_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_wait_at_free', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_wait_at_free_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_wait_at_free', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_communication_exclusive(self):
        correct_values = [3.410605131648481E-13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.037955000331814426, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, -4.547473508864641E-13, 5.6843418860808015E-14, 0.9170730600005448,
                          1.2074014970006888, 256.4063859539993, 0.0, -5.6843418860808015E-14, 0.0, 0.0, 0.0,
                          1.2983958860111522, 0.0, 0.5368152740016017, 143.66969102798737, 0.0, 0.0, 0.0, 0.0,
                          1.132289014993593, 0.0, 0.531071308005012, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9254478609992178, 0.0,
                          0.9247005769990966, 205.0222488690045, 0.0, 0.0, 0.0, 0.0, 2.1353252759966277, 0.0,
                          0.9980863499880197, 0.0, 2.8421709430404007E-14, 0.0, 0.0, 0.0, 1.7770466339989017, 0.0,
                          0.8499905879919236, 186.79153055902245, 0.0, 0.0, 0.0, 0.0, 1.9859988259910244, 0.0,
                          0.9389768680102062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1575282435953227, 0.0,
                          0.001667225000403505, 0.004110125999943648, 1.172201157999666, 0.0, 0.0, 0.13674938280041715,
                          0.013688308170969776, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_communication', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_communication_inclusive(self):
        correct_values = [810.5723748738995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.037955000331814426, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 809.0484754300007, 258.5308605110006, 0.9170730600005448, 1.2074014970006888,
                          256.4063859539993, 0.0, 147.1682625109987, 0.0, 0.0, 1.2983958860111522, 1.2983958860111522,
                          0.5368152740016017, 0.5368152740016017, 143.66969102798737, 0.0, 0.0, 0.0, 1.132289014993593,
                          1.132289014993593, 0.531071308005012, 0.531071308005012, 0.0, 211.00580893298746, 0.0, 0.0,
                          1.9254478609992178, 1.9254478609992178, 0.9247005769990966, 0.9247005769990966,
                          205.0222488690045, 0.0, 0.0, 0.0, 2.1353252759966277, 2.1353252759966277, 0.9980863499880197,
                          0.9980863499880197, 0.0, 192.34354347501454, 0.0, 0.0, 1.7770466339989017, 1.7770466339989017,
                          0.8499905879919236, 0.8499905879919236, 186.79153055902245, 0.0, 0.0, 0.0, 1.9859988259910244,
                          1.9859988259910244, 0.9389768680102062, 0.9389768680102062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 1.472256135395753, 0.1575282435953227, 0.1575282435953227, 1.1779785090000132,
                          0.001667225000403505, 0.004110125999943648, 1.172201157999666, 0.0, 0.13674938280041715,
                          0.13674938280041715, 0.013688308170969776, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_communication', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_point2point_exclusive(self):
        correct_values = [2.2737367544323206E-13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          -4.547473508864641E-13, 5.6843418860808015E-14, 0.9170730600005448, 1.2074014970006888,
                          256.4063859539993, 0.0, -5.6843418860808015E-14, 0.0, 0.0, 0.0, 1.2983958860111522, 0.0,
                          0.5368152740016017, 143.66969102798737, 0.0, 0.0, 0.0, 0.0, 1.132289014993593, 0.0,
                          0.531071308005012, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9254478609992178, 0.0, 0.9247005769990966,
                          205.0222488690045, 0.0, 0.0, 0.0, 0.0, 2.1353252759966277, 0.0, 0.9980863499880197, 0.0,
                          2.8421709430404007E-14, 0.0, 0.0, 0.0, 1.7770466339989017, 0.0, 0.8499905879919236,
                          186.79153055902245, 0.0, 0.0, 0.0, 0.0, 1.9859988259910244, 0.0, 0.9389768680102062, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001667225000403505, 0.004110125999943648,
                          1.172201157999666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_point2point', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_point2point_inclusive(self):
        correct_values = [810.226453939001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          809.0484754300007, 258.5308605110006, 0.9170730600005448, 1.2074014970006888,
                          256.4063859539993, 0.0, 147.1682625109987, 0.0, 0.0, 1.2983958860111522, 1.2983958860111522,
                          0.5368152740016017, 0.5368152740016017, 143.66969102798737, 0.0, 0.0, 0.0, 1.132289014993593,
                          1.132289014993593, 0.531071308005012, 0.531071308005012, 0.0, 211.00580893298746, 0.0, 0.0,
                          1.9254478609992178, 1.9254478609992178, 0.9247005769990966, 0.9247005769990966,
                          205.0222488690045, 0.0, 0.0, 0.0, 2.1353252759966277, 2.1353252759966277, 0.9980863499880197,
                          0.9980863499880197, 0.0, 192.34354347501454, 0.0, 0.0, 1.7770466339989017, 1.7770466339989017,
                          0.8499905879919236, 0.8499905879919236, 186.79153055902245, 0.0, 0.0, 0.0, 1.9859988259910244,
                          1.9859988259910244, 0.9389768680102062, 0.9389768680102062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 1.1779785090000132, 0.0, 0.0, 1.1779785090000132, 0.001667225000403505,
                          0.004110125999943648, 1.172201157999666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_point2point', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_latesender_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          5.6843418860808015E-14, 0.0, 0.0, 0.0, 23.704618661000485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 38.53662098699651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 66.05732320699886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 59.689554927999716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_latesender', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_latesender_inclusive(self):
        correct_values = [187.98965459799575, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          187.98811778299563, 23.704618661000485, 0.0, 0.0, 23.704618661000485, 0.0, 38.53662098699651,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38.53662098699651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          66.05732320699886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 66.05732320699886, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 59.689554927999716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 59.689554927999716, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0,
                          0.0, 0.0015368150001222602, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_latesender', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_latesender_wo_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_latesender_wo', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_latesender_wo_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_latesender_wo', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_lswo_different_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_lswo_different', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_lswo_different_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_lswo_different', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_lswo_same_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_lswo_same', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_lswo_same_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_lswo_same', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_latereceiver_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 61.46573091599554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 58.779358434003335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 55.32804120000289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_latereceiver', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_latereceiver_inclusive(self):
        correct_values = [175.57313055000176, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          175.57313055000176, 0.0, 0.0, 0.0, 0.0, 0.0, 61.46573091599554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          61.46573091599554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 58.779358434003335, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 58.779358434003335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 55.32804120000289,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 55.32804120000289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, ]
        metric_values = self.get_values_for_metric('mpi_latereceiver', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_collective_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.037955000331814426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1575282435953227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.13674938280041715, 0.013688308170969776, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_collective', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_collective_inclusive(self):
        correct_values = [0.34592093489852405, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.037955000331814426, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29427762639573984, 0.1575282435953227,
                          0.1575282435953227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13674938280041715, 0.13674938280041715,
                          0.013688308170969776, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_collective', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_earlyreduce_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_earlyreduce', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_earlyreduce_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_earlyreduce', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_earlyscan_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_earlyscan', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_earlyscan_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_earlyscan', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_latebroadcast_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03598037300000334, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_latebroadcast', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_latebroadcast_inclusive(self):
        correct_values = [0.03598037300000334, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03598037300000334, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, ]
        metric_values = self.get_values_for_metric('mpi_latebroadcast', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_nxn_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.15328740000080643, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13455449700103372, 0.0, 0.0,
                          0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_nxn', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_nxn_inclusive(self):
        correct_values = [0.28784189700184015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.28784189700184015, 0.15328740000080643, 0.15328740000080643, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.13455449700103372, 0.13455449700103372, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_nxn', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_nxn_completion_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.001685707596834618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.368377996565869E-4, 0.0, 0.0,
                          0.0, ]
        metric_values = self.get_values_for_metric('mpi_nxn_completion', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_nxn_completion_inclusive(self):
        correct_values = [0.002622545396491205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.002622545396491205, 0.001685707596834618, 0.001685707596834618, 0.0,
                          0.0, 0.0, 0.0, 0.0, 9.368377996565869E-4, 9.368377996565869E-4, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_nxn_completion', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_communication_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_communication', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_communication_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_communication', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_comm_late_post_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_comm_late_post', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_comm_late_post_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_comm_late_post', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_comm_lock_competition_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_comm_lock_competition', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_comm_lock_competition_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_comm_lock_competition', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_comm_wait_for_progress_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_comm_wait_for_progress', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_comm_wait_for_progress_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_rma_comm_wait_for_progress', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_io_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_io', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_io_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_io', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_io_collective_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_io_collective', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_io_collective_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_io_collective', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_init_exit_exclusive(self):
        correct_values = [0.0, 0.0, 31.29664904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007278622425815229, ]
        metric_values = self.get_values_for_metric('mpi_init_exit', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_init_exit_inclusive(self):
        correct_values = [31.303927662425814, 31.29664904, 31.29664904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.007278622425815229, ]
        metric_values = self.get_values_for_metric('mpi_init_exit', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_init_completion_exclusive(self):
        correct_values = [0.0, 0.0, 5.950380000021571E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_init_completion', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_init_completion_inclusive(self):
        correct_values = [5.950380000021571E-4, 5.950380000021571E-4, 5.950380000021571E-4, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_init_completion', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_finalize_wait_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.568828137825221E-4, ]
        metric_values = self.get_values_for_metric('mpi_finalize_wait', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_finalize_wait_inclusive(self):
        correct_values = [5.568828137825221E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          5.568828137825221E-4, ]
        metric_values = self.get_values_for_metric('mpi_finalize_wait', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_time_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_time', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_time_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_time', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_flush_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_flush', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_flush_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_flush', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_management_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_management', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_management_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_management', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_fork_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_fork', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_fork_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_fork', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_synchronization_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_synchronization', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_synchronization_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_synchronization', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_barrier_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_barrier', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_barrier_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_barrier', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ebarrier_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ebarrier', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ebarrier_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ebarrier', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ebarrier_wait_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ebarrier_wait', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ebarrier_wait_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ebarrier_wait', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ibarrier_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ibarrier', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ibarrier_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ibarrier', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ibarrier_wait_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ibarrier_wait', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ibarrier_wait_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ibarrier_wait', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_taskwait_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_taskwait', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_taskwait_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_taskwait', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_critical_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_critical', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_critical_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_critical', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_lock_contention_critical_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_lock_contention_critical', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_lock_contention_critical_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_lock_contention_critical', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_lock_api_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_lock_api', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_lock_api_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_lock_api', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_lock_contention_api_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_lock_contention_api', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_lock_contention_api_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_lock_contention_api', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ordered_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ordered', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_ordered_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_ordered', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_time(self):
        self.assertRaises(MissingMetricError, self.get_values_for_metric, 'pthread_time', convert_to_exclusive=True)
        self.assertRaises(MissingMetricError, self.get_values_for_metric, 'pthread_time', convert_to_inclusive=True)

    def test_pthread_management_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_management', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_management_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_management', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_synchronization_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_synchronization', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_synchronization_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_synchronization', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_mutex_api_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_mutex_api', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_mutex_api_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_mutex_api', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_lock_contention_mutex_lock_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_lock_contention_mutex_lock', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_lock_contention_mutex_lock_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_lock_contention_mutex_lock', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_cond_api_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_cond_api', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_cond_api_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_cond_api', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_lock_contention_conditional_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_lock_contention_conditional', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_pthread_lock_contention_conditional_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('pthread_lock_contention_conditional', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_overhead_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('overhead', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_overhead_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('overhead', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_idle_threads_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_idle_threads', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_idle_threads_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_idle_threads', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_limited_parallelism_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_limited_parallelism', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_omp_limited_parallelism_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('omp_limited_parallelism', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_visits_exclusive(self):
        correct_values = [64, 64, 64, 128, 64, 64, 128, 320, 64, 64, 128, 64, 64, 64, 64, 16064, 16064, 96384, 96384,
                          16064, 16064, 16064, 128512, 128512, 112448, 112448, 112448, 112448, 449792, 112448, 41373836,
                          128512, 112448, 112448, 112448, 112448, 112448, 16064, 128512, 128512, 112448, 112448, 112448,
                          112448, 449792, 112448, 41373836, 128512, 112448, 112448, 112448, 112448, 112448, 16064,
                          128512, 128512, 112448, 112448, 112448, 112448, 449792, 112448, 41373836, 128512, 112448,
                          112448, 112448, 112448, 112448, 16064, 128, 128, 64, 64, 64, 64, 64, 64, 64, 64, 384, 384, 64,
                          64, 64, 64, 64, 1, 64, ]
        metric_values = self.get_values_for_metric('visits', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_visits_inclusive(self):
        correct_values = [130325541, 512, 64, 128, 64, 64, 128, 320, 64, 64, 128, 64, 64, 64, 64, 130322212, 240960,
                          96384, 96384, 16064, 16064, 43349708, 41630860, 128512, 224896, 112448, 224896, 112448,
                          449792, 112448, 41373836, 128512, 224896, 112448, 224896, 112448, 112448, 43349708, 41630860,
                          128512, 224896, 112448, 224896, 112448, 449792, 112448, 41373836, 128512, 224896, 112448,
                          224896, 112448, 112448, 43349708, 41630860, 128512, 224896, 112448, 224896, 112448, 449792,
                          112448, 41373836, 128512, 224896, 112448, 224896, 112448, 112448, 16064, 128, 128, 64, 64, 64,
                          64, 1280, 128, 64, 960, 384, 384, 64, 64, 128, 64, 64, 1, 64, ]
        metric_values = self.get_values_for_metric('visits', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_inclusive(self):
        correct_values = [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_p2p_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_p2p', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_p2p_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_p2p', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_send_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_send', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_send_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_send', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_slr_count_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_slr_count', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_slr_count_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_slr_count', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_recv_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_recv', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_recv_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_recv', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_sls_count_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_sls_count', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_sls_count_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_sls_count', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_slswo_count_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_slswo_count', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_slswo_count_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_slswo_count', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_coll_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_coll', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_coll_inclusive(self):
        correct_values = [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_coll', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_rma_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_rma', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_rma_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_rma', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_fence_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_fence', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_fence_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_fence', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_access_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats_access', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_access_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats_access', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_exposure_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats_exposure', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_gats_exposure_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_gats_exposure', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_locks_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_locks', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_syncs_locks_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('syncs_locks', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_pairsync_count_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_rma_pairsync_count', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_pairsync_count_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_rma_pairsync_count', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_pairsync_unneeded_count_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_rma_pairsync_unneeded_count', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_rma_pairsync_unneeded_count_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_rma_pairsync_unneeded_count', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96384, 96384, 0, 0, 0, 0, 0, 112448,
                          0, 0, 224896, 0, 0, 0, 0, 112448, 0, 0, 0, 0, 0, 0, 0, 112448, 0, 0, 224896, 0, 0, 0, 0,
                          112448, 0, 0, 0, 0, 0, 0, 0, 112448, 0, 0, 224896, 0, 0, 0, 0, 112448, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 64, 0, 0, 384, 384, 0, 0, 64, 64, 0, 0, ]
        metric_values = self.get_values_for_metric('comms', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_inclusive(self):
        correct_values = [1543424, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 1542144, 192768, 0, 96384, 96384, 0,
                          449792, 0, 0, 112448, 112448, 0, 0, 224896, 0, 0, 0, 112448, 112448, 0, 0, 0, 449792, 0, 0,
                          112448, 112448, 0, 0, 224896, 0, 0, 0, 112448, 112448, 0, 0, 0, 449792, 0, 0, 112448, 112448,
                          0, 0, 224896, 0, 0, 0, 112448, 112448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 896, 64, 64, 768, 0, 384,
                          384, 0, 64, 64, 64, 0, 0, ]
        metric_values = self.get_values_for_metric('comms', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_p2p_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96384, 96384, 0, 0, 0, 0, 0, 112448, 0,
                          0, 224896, 0, 0, 0, 0, 112448, 0, 0, 0, 0, 0, 0, 0, 112448, 0, 0, 224896, 0, 0, 0, 0, 112448,
                          0, 0, 0, 0, 0, 0, 0, 112448, 0, 0, 224896, 0, 0, 0, 0, 112448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_p2p', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_p2p_inclusive(self):
        correct_values = [1542912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1542144, 192768, 0, 96384, 96384, 0,
                          449792, 0, 0, 112448, 112448, 0, 0, 224896, 0, 0, 0, 112448, 112448, 0, 0, 0, 449792, 0, 0,
                          112448, 112448, 0, 0, 224896, 0, 0, 0, 112448, 112448, 0, 0, 0, 449792, 0, 0, 112448, 112448,
                          0, 0, 224896, 0, 0, 0, 112448, 112448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 768, 0, 0, 768, 0, 384,
                          384, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_p2p', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_send_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96384, 0, 0, 0, 0, 0, 0, 112448, 0, 0,
                          0, 0, 0, 0, 0, 112448, 0, 0, 0, 0, 0, 0, 0, 112448, 0, 0, 0, 0, 0, 0, 0, 112448, 0, 0, 0, 0,
                          0, 0, 0, 112448, 0, 0, 0, 0, 0, 0, 0, 112448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          384, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_send', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_send_inclusive(self):
        correct_values = [771456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 771072, 96384, 0, 96384, 0, 0, 224896, 0, 0,
                          112448, 112448, 0, 0, 0, 0, 0, 0, 112448, 112448, 0, 0, 0, 224896, 0, 0, 112448, 112448, 0, 0,
                          0, 0, 0, 0, 112448, 112448, 0, 0, 0, 224896, 0, 0, 112448, 112448, 0, 0, 0, 0, 0, 0, 112448,
                          112448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 384, 0, 384, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_send', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_clr_count_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115209, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          72687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_clr_count', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_clr_count_inclusive(self):
        correct_values = [261838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 261838, 0, 0, 0, 0, 0, 115209, 0, 0, 0, 0,
                          0, 0, 115209, 0, 0, 0, 0, 0, 0, 0, 0, 73942, 0, 0, 0, 0, 0, 0, 73942, 0, 0, 0, 0, 0, 0, 0, 0,
                          72687, 0, 0, 0, 0, 0, 0, 72687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_clr_count', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_recv_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96384, 0, 0, 0, 0, 0, 0, 0, 0,
                          224896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 224896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0,
                          0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_recv', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_recv_inclusive(self):
        correct_values = [771456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 771072, 96384, 0, 0, 96384, 0, 224896, 0, 0,
                          0, 0, 0, 0, 224896, 0, 0, 0, 0, 0, 0, 0, 0, 224896, 0, 0, 0, 0, 0, 0, 224896, 0, 0, 0, 0, 0,
                          0, 0, 0, 224896, 0, 0, 0, 0, 0, 0, 224896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384,
                          0, 0, 384, 0, 0, 384, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_recv', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_cls_count_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14427, 0, 0, 0, 0, 0, 0, 0, 0, 69321,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 76861, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0,
                          0, ]
        metric_values = self.get_values_for_metric('mpi_cls_count', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_cls_count_inclusive(self):
        correct_values = [237644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237602, 14427, 0, 0, 14427, 0, 69321, 0, 0,
                          0, 0, 0, 0, 69321, 0, 0, 0, 0, 0, 0, 0, 0, 76993, 0, 0, 0, 0, 0, 0, 76993, 0, 0, 0, 0, 0, 0,
                          0, 0, 76861, 0, 0, 0, 0, 0, 0, 76861, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0,
                          42, 0, 0, 42, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_cls_count', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_clswo_count_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_clswo_count', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_clswo_count_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_clswo_count', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_coll_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 64, 64, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_coll', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_coll_inclusive(self):
        correct_values = [512, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 64, 64, 0, 0, 0, 0, 0, 64, 64, 64, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_coll', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_cxch_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_cxch', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_cxch_inclusive(self):
        correct_values = [134, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 64, 64, 0, 0, 0, 0, 0, 64, 64, 1, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_cxch', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_csrc_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_csrc', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_csrc_inclusive(self):
        correct_values = [63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_csrc', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_cdst_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_cdst', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_cdst_inclusive(self):
        correct_values = [315, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_cdst', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_puts_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma_puts', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_puts_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma_puts', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_gets_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma_gets', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_comms_rma_gets_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('comms_rma_gets', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140389079040, 140389079040, 0, 0, 0,
                          0, 0, 72974254080, 0, 0, 85136629760, 0, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0,
                          72974254080, 0, 0, 85136629760, 0, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 72974254080, 0,
                          0, 85136629760, 0, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 0, 0,
                          559319040, 559319040, 0, 0, 327680, 1024, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_inclusive(self):
        correct_values = [792717235200, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 791597936640, 280778158080, 0,
                          140389079040, 140389079040, 0, 170273259520, 0, 0, 72974254080, 72974254080, 0, 0,
                          85136629760, 0, 0, 0, 12162375680, 12162375680, 0, 0, 0, 170273259520, 0, 0, 72974254080,
                          72974254080, 0, 0, 85136629760, 0, 0, 0, 12162375680, 12162375680, 0, 0, 0, 170273259520, 0,
                          0, 72974254080, 72974254080, 0, 0, 85136629760, 0, 0, 0, 12162375680, 12162375680, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 1119293440, 327680, 327680, 1118638080, 0, 559319040, 559319040, 0, 327680,
                          327680, 1024, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_p2p_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140389079040, 140389079040, 0, 0, 0, 0,
                          0, 72974254080, 0, 0, 85136629760, 0, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 72974254080,
                          0, 0, 85136629760, 0, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 72974254080, 0, 0,
                          85136629760, 0, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 559319040,
                          559319040, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_p2p', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_p2p_inclusive(self):
        correct_values = [792716574720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 791597936640, 280778158080, 0,
                          140389079040, 140389079040, 0, 170273259520, 0, 0, 72974254080, 72974254080, 0, 0,
                          85136629760, 0, 0, 0, 12162375680, 12162375680, 0, 0, 0, 170273259520, 0, 0, 72974254080,
                          72974254080, 0, 0, 85136629760, 0, 0, 0, 12162375680, 12162375680, 0, 0, 0, 170273259520, 0,
                          0, 72974254080, 72974254080, 0, 0, 85136629760, 0, 0, 0, 12162375680, 12162375680, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 1118638080, 0, 0, 1118638080, 0, 559319040, 559319040, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_p2p', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_sent_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140389079040, 0, 0, 0, 0, 0, 0,
                          72974254080, 0, 0, 0, 0, 0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 72974254080, 0, 0, 0, 0,
                          0, 0, 0, 12162375680, 0, 0, 0, 0, 0, 0, 0, 72974254080, 0, 0, 0, 0, 0, 0, 0, 12162375680, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 559319040, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_sent', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_sent_inclusive(self):
        correct_values = [396358287360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 395798968320, 140389079040, 0,
                          140389079040, 0, 0, 85136629760, 0, 0, 72974254080, 72974254080, 0, 0, 0, 0, 0, 0,
                          12162375680, 12162375680, 0, 0, 0, 85136629760, 0, 0, 72974254080, 72974254080, 0, 0, 0, 0, 0,
                          0, 12162375680, 12162375680, 0, 0, 0, 85136629760, 0, 0, 72974254080, 72974254080, 0, 0, 0, 0,
                          0, 0, 12162375680, 12162375680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 559319040, 0, 0, 559319040, 0,
                          559319040, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_sent', convert_to_inclusive=True)
        self.assertListEqual(correct_values, metric_values)

    def test_bytes_rcvd_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140389079040, 0, 0, 0, 0, 0, 0, 0, 0,
                          85136629760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 559319040, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_rcvd', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_rcvd_inclusive(self):
        correct_values = [396358287360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 395798968320, 140389079040, 0, 0,
                          140389079040, 0, 85136629760, 0, 0, 0, 0, 0, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0, 0,
                          85136629760, 0, 0, 0, 0, 0, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0, 0, 85136629760, 0, 0, 0, 0,
                          0, 0, 85136629760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 559319040, 0, 0, 559319040, 0,
                          0, 559319040, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_rcvd', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_coll_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 0, 0, 0, 0, 0, 0, 327680, 1024, 0,
                          0, ]
        metric_values = self.get_values_for_metric('bytes_coll', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_coll_inclusive(self):
        correct_values = [660480, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 655360, 327680, 327680, 0, 0, 0, 0, 0, 327680,
                          327680, 1024, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_coll', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_cout_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 163840, 512, 0,
                          0, ]
        metric_values = self.get_values_for_metric('bytes_cout', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_cout_inclusive(self):
        correct_values = [330240, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 163840, 163840, 0, 0, 0, 0, 0, 163840,
                          163840, 512, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_cout', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_cin_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 163840, 512, 0,
                          0, ]
        metric_values = self.get_values_for_metric('bytes_cin', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_cin_inclusive(self):
        correct_values = [330240, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 163840, 163840, 0, 0, 0, 0, 0, 163840,
                          163840, 512, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_cin', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_rma_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_rma', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_rma_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_rma', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_put_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_put', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_put_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_put', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_get_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_get', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_bytes_get_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('bytes_get', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_ops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_ops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_ops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_ops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_iops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_iops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_iops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_iops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_irops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_irops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_irops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_irops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_iwops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_iwops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_iwops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_iwops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_cops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_cops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_cops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_cops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_crops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_crops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_crops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_crops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_cwops_exclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_cwops', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_file_cwops_inclusive(self):
        correct_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        metric_values = self.get_values_for_metric('mpi_file_cwops', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_exclusive(self):
        correct_values = [0.060413983757769074, 0.00143038692092049, 8.851285817885004E-4, 7.85511856624441E-6,
                          3.8567399287046623E-7, 4.22858877188418E-4, 1.191520857498398E-4, 7.304014352382094E-5,
                          4.363239774728076E-4, 1.2067383264896706E-4, 0.6315023844536467, 3.0358966346226535E-5,
                          0.03220484926396726, 0.28319886488534074, 4.248028493663629E-5, 0.010585384687431088,
                          3.7833792542539477, 0.1310554740984139, 0.2742567472052031, 3.309351431129162,
                          9.713677376311647, 0.10345288708678879, 54.590288747831146, 0.08840779106548363,
                          4.841755472051312, 0.11157052946863169, 0.015616680239512348, 0.09279004344228417,
                          18.26437689922288, 1.6867723263905636, 0.6399325667595053, 15.206069460272001,
                          0.6192747765053179, 0.14369576764077538, 0.009223809686988792, 0.043874325975165857,
                          0.2690056559267935, 0.1373885639811192, 62.22252128255839, 0.110470705689891,
                          7.628718815375276, 0.2336845834579904, 0.01197315397761442, 0.08935870929010233,
                          37.46277568639097, 3.1307937511636923, 0.26008714343805667, 20.20594654801818,
                          0.5457887243662249, 0.08969940151679812, 0.012126229551794404, 0.16637473201882794,
                          0.30801579630895276, 0.12735550020340725, 56.208721376362554, 0.11089613248915557,
                          5.2635462116773235, 0.18889669241504034, 0.009496450352692892, 0.0692358303806219,
                          27.848290205770844, 2.5640125701748055, 0.2368463493541331, 20.46380320273733,
                          0.3696159273360668, 0.10421816443137001, 0.012800610160222048, 0.19831741593301486,
                          0.319669608345051, 2.5643081413928317, 2.608879572346214E-6, 4.737295142555041E-4,
                          5.733107249579975E-4, 5.575196022007351E-7, 4.4486062002585515E-7, 1.4104358266435089E-9,
                          2.7784405904340836E-5, 0.004009829717731222, 9.612953896242825E-4, 0.0072476423510952626,
                          2.0732210066776453E-4, 1.1050548389141996E-4, 0.033360523561892556, 0.09356839816119343,
                          6.012747035845295E-4, 0.0, 0.0, 0.004018855811978028, 0.0, ]
        metric_values = self.get_values_for_metric('delay', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_inclusive(self):
        correct_values = [364.3802204352923, 0.002865767258206363, 8.851285817885004E-4, 7.85511856624441E-6,
                          3.8567399287046623E-7, 4.22858877188418E-4, 1.191520857498398E-4, 7.304014352382094E-5,
                          4.363239774728076E-4, 1.2067383264896706E-4, 0.6315023844536467, 3.0358966346226535E-5,
                          0.03220484926396726, 0.28319886488534074, 4.248028493663629E-5, 363.2241676238713,
                          17.211720282998375, 0.1310554740984139, 0.2742567472052031, 3.309351431129162,
                          9.713677376311647, 96.72610773956517, 55.318629105656136, 0.08840779106548363,
                          4.953326001519944, 0.11157052946863169, 0.10840672368179652, 0.09279004344228417,
                          18.26437689922288, 1.6867723263905636, 0.6399325667595053, 15.206069460272001,
                          0.7629705441460933, 0.14369576764077538, 0.05309813566215465, 0.043874325975165857,
                          0.2690056559267935, 132.6157238271039, 62.59307913168634, 0.110470705689891,
                          7.862403398833266, 0.2336845834579904, 0.10133186326771675, 0.08935870929010233,
                          37.46277568639097, 3.1307937511636923, 0.26008714343805667, 20.20594654801818,
                          0.6354881258830231, 0.08969940151679812, 0.17850096157062234, 0.16637473201882794,
                          0.30801579630895276, 114.09572224812365, 56.556463858205845, 0.11089613248915557,
                          5.452442904092364, 0.18889669241504034, 0.07873228073331479, 0.0692358303806219,
                          27.848290205770844, 2.5640125701748055, 0.2368463493541331, 20.46380320273733,
                          0.4738340917674368, 0.10421816443137001, 0.2111180260932369, 0.19831741593301486,
                          0.319669608345051, 2.5643081413928317, 2.608879572346214E-6, 4.737295142555041E-4,
                          5.733107249579975E-4, 5.575196022007351E-7, 4.4486062002585515E-7, 1.4104358266435089E-9,
                          0.14009457587558483, 0.0049711251073555045, 9.612953896242825E-4, 0.13449439165874044,
                          2.0732210066776453E-4, 1.1050548389141996E-4, 0.033360523561892556, 0.09356839816119343,
                          6.012747035845295E-4, 0.0, 0.0, 0.004018855811978028, 0.0, ]
        metric_values = self.get_values_for_metric('delay', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_mpi_exclusive(self):
        correct_values = [0.060413983757769074, 0.00143038692092049, 8.851285817885004E-4, 7.85511856624441E-6,
                          3.8567399287046623E-7, 4.22858877188418E-4, 1.191520857498398E-4, 7.304014352382094E-5,
                          4.363239774728076E-4, 1.2067383264896706E-4, 0.6315023844536467, 3.0358966346226535E-5,
                          0.03220484926396726, 0.28319886488534074, 4.248028493663629E-5, 0.010585384687431088,
                          3.7833792542539477, 0.1310554740984139, 0.2742567472052031, 3.309351431129162,
                          9.713677376311647, 0.10345288708678879, 54.590288747831146, 0.08840779106548363,
                          4.841755472051312, 0.11157052946863169, 0.015616680239512348, 0.09279004344228417,
                          18.26437689922288, 1.6867723263905636, 0.6399325667595053, 15.206069460272001,
                          0.6192747765053179, 0.14369576764077538, 0.009223809686988792, 0.043874325975165857,
                          0.2690056559267935, 0.1373885639811192, 62.22252128255839, 0.110470705689891,
                          7.628718815375276, 0.2336845834579904, 0.01197315397761442, 0.08935870929010233,
                          37.46277568639097, 3.1307937511636923, 0.26008714343805667, 20.20594654801818,
                          0.5457887243662249, 0.08969940151679812, 0.012126229551794404, 0.16637473201882794,
                          0.30801579630895276, 0.12735550020340725, 56.208721376362554, 0.11089613248915557,
                          5.2635462116773235, 0.18889669241504034, 0.009496450352692892, 0.0692358303806219,
                          27.848290205770844, 2.5640125701748055, 0.2368463493541331, 20.46380320273733,
                          0.3696159273360668, 0.10421816443137001, 0.012800610160222048, 0.19831741593301486,
                          0.319669608345051, 2.5643081413928317, 2.608879572346214E-6, 4.737295142555041E-4,
                          5.733107249579975E-4, 5.575196022007351E-7, 4.4486062002585515E-7, 1.4104358266435089E-9,
                          2.7784405904340836E-5, 0.004009829717731222, 9.612953896242825E-4, 0.0072476423510952626,
                          2.0732210066776453E-4, 1.1050548389141996E-4, 0.033360523561892556, 0.09356839816119343,
                          6.012747035845295E-4, 0.0, 0.0, 0.004018855811978028, 0.0, ]
        metric_values = self.get_values_for_metric('delay_mpi', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_mpi_inclusive(self):
        correct_values = [364.3802204352923, 0.002865767258206363, 8.851285817885004E-4, 7.85511856624441E-6,
                          3.8567399287046623E-7, 4.22858877188418E-4, 1.191520857498398E-4, 7.304014352382094E-5,
                          4.363239774728076E-4, 1.2067383264896706E-4, 0.6315023844536467, 3.0358966346226535E-5,
                          0.03220484926396726, 0.28319886488534074, 4.248028493663629E-5, 363.2241676238713,
                          17.211720282998375, 0.1310554740984139, 0.2742567472052031, 3.309351431129162,
                          9.713677376311647, 96.72610773956517, 55.318629105656136, 0.08840779106548363,
                          4.953326001519944, 0.11157052946863169, 0.10840672368179652, 0.09279004344228417,
                          18.26437689922288, 1.6867723263905636, 0.6399325667595053, 15.206069460272001,
                          0.7629705441460933, 0.14369576764077538, 0.05309813566215465, 0.043874325975165857,
                          0.2690056559267935, 132.6157238271039, 62.59307913168634, 0.110470705689891,
                          7.862403398833266, 0.2336845834579904, 0.10133186326771675, 0.08935870929010233,
                          37.46277568639097, 3.1307937511636923, 0.26008714343805667, 20.20594654801818,
                          0.6354881258830231, 0.08969940151679812, 0.17850096157062234, 0.16637473201882794,
                          0.30801579630895276, 114.09572224812365, 56.556463858205845, 0.11089613248915557,
                          5.452442904092364, 0.18889669241504034, 0.07873228073331479, 0.0692358303806219,
                          27.848290205770844, 2.5640125701748055, 0.2368463493541331, 20.46380320273733,
                          0.4738340917674368, 0.10421816443137001, 0.2111180260932369, 0.19831741593301486,
                          0.319669608345051, 2.5643081413928317, 2.608879572346214E-6, 4.737295142555041E-4,
                          5.733107249579975E-4, 5.575196022007351E-7, 4.4486062002585515E-7, 1.4104358266435089E-9,
                          0.14009457587558483, 0.0049711251073555045, 9.612953896242825E-4, 0.13449439165874044,
                          2.0732210066776453E-4, 1.1050548389141996E-4, 0.033360523561892556, 0.09356839816119343,
                          6.012747035845295E-4, 0.0, 0.0, 0.004018855811978028, 0.0, ]
        metric_values = self.get_values_for_metric('delay_mpi', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_p2p_exclusive(self):
        correct_values = [0.023481624602368356, 6.701884459384479E-4, 3.910364086483433E-4, 5.8329369405917595E-6,
                          2.5655037640051804E-7, 3.2088253097941396E-4, 5.87730016230597E-5, 3.597293642148616E-5,
                          3.5560906480075477E-4, 9.75047549483893E-5, 0.270827583415861, 2.0636295484243742E-5,
                          0.029036539128682537, 0.2479629377131105, 2.807876641192041E-5, 0.010230471690817922,
                          3.775151960467076, 0.13049888617137365, 0.27420697410207945, 3.2991568184503697,
                          9.692481025523486, 0.10328329609619402, 54.49416084010439, 0.08832052852188822,
                          4.837453843710603, 0.11142508219963632, 0.015604920770736344, 0.09263026627501607,
                          18.231764376462472, 1.68538008168241, 0.6392693532603135, 15.178721222726816,
                          0.6183478098634889, 0.14350545682664778, 0.009213343435312743, 0.043767432218128184,
                          0.26869455169271017, 0.13702321289733277, 62.14178270756132, 0.11031829514769653,
                          7.618367622673334, 0.23310002601909058, 0.011878746330368437, 0.08903690706761232,
                          37.42151397661489, 3.1251527599879574, 0.2596515593069467, 20.181912147402684,
                          0.5452153400200306, 0.0894382257879805, 0.012103221886653498, 0.16612219052617014,
                          0.3074810018633171, 0.12709996195901851, 56.15978998165658, 0.11066015956958848,
                          5.253452474067427, 0.18865327090891623, 0.009489871414158954, 0.06907163799040776,
                          27.82337888453717, 2.5618020159670722, 0.23655012340601705, 20.4370583802517,
                          0.3691844825664946, 0.10406140852953917, 0.012683830463805335, 0.19800181513352577,
                          0.3193561302419948, 2.5560202199487563, 2.4951520939851133E-6, 4.73347553939919E-4,
                          5.730277607854434E-4, 0.0, 0.0, 0.0, 1.2450586842067783E-6, 5.324548384808068E-6,
                          2.7775238365914333E-4, 0.001044161736504531, 2.060862728707965E-4, 2.24500001877459E-6, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_p2p', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_p2p_inclusive(self):
        correct_values = [363.3055602739771, 0.0014469698745062571, 3.910364086483433E-4, 5.8329369405917595E-6,
                          2.5655037640051804E-7, 3.2088253097941396E-4, 5.87730016230597E-5, 3.597293642148616E-5,
                          3.5560906480075477E-4, 9.75047549483893E-5, 0.270827583415861, 2.0636295484243742E-5,
                          0.029036539128682537, 0.2479629377131105, 2.807876641192041E-5, 362.72968113195753,
                          17.171495664714385, 0.13049888617137365, 0.27420697410207945, 3.2991568184503697,
                          9.692481025523486, 96.56154240584677, 55.22175072188659, 0.08832052852188822,
                          4.948878925910239, 0.11142508219963632, 0.10823518704575241, 0.09263026627501607,
                          18.231764376462472, 1.68538008168241, 0.6392693532603135, 15.178721222726816,
                          0.7618532666901366, 0.14350545682664778, 0.05298077565344093, 0.043767432218128184,
                          0.26869455169271017, 132.45009794109336, 62.511752562015964, 0.11031829514769653,
                          7.851467648692425, 0.23310002601909058, 0.10091565339798075, 0.08903690706761232,
                          37.42151397661489, 3.1251527599879574, 0.2596515593069467, 20.181912147402684,
                          0.6346535658080111, 0.0894382257879805, 0.17822541241282364, 0.16612219052617014,
                          0.3074810018633171, 113.98029442866343, 56.50700026463218, 0.11066015956958848,
                          5.4421057449763435, 0.18865327090891623, 0.07856150940456672, 0.06907163799040776,
                          27.82337888453717, 2.5618020159670722, 0.23655012340601705, 20.4370583802517,
                          0.47324589109603377, 0.10406140852953917, 0.2106856455973311, 0.19800181513352577,
                          0.3193561302419948, 2.5560202199487563, 2.4951520939851133E-6, 4.73347553939919E-4,
                          5.730277607854434E-4, 0.0, 0.0, 0.0, 0.0015368150001222602, 2.830769320439514E-4,
                          2.7775238365914333E-4, 0.0012524930093941022, 2.060862728707965E-4, 2.24500001877459E-6, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_p2p', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latesender_aggregate_exclusive(self):
        correct_values = [0.012784940495492947, 3.937643921521908E-4, 2.2015640402880385E-4, 3.463163523317766E-6,
                          1.5450203712096344E-7, 2.4063431727891355E-4, 3.8180917985557155E-5, 2.8357186364524222E-5,
                          2.459480734823617E-4, 6.990985156917139E-5, 0.21492463017427327, 1.590549836388854E-5,
                          0.02130657398287921, 0.20197209433347368, 2.110586806393961E-5, 0.006783197042636857,
                          1.682565739177953, 0.09694727466222777, 0.10719010608157527, 1.22417933336784,
                          3.8459597526532834, 0.041472924025576674, 24.019177492556274, 0.038812934830947145,
                          2.0968625100061273, 0.030941546939827768, 0.0049263184646582345, 0.039449328410544375,
                          4.866852599408024, 0.7126381177168859, 0.28090974384817996, 6.583312728875736,
                          0.2762998831579569, 0.029960783177275182, 0.0037869788273497684, 0.032129759319230775,
                          0.13175676562814076, 0.0891816868226698, 32.76873005520249, 0.06437368138966393,
                          4.158033297768543, 0.06411240806586149, 0.006046957532868033, 0.06349128824304737,
                          17.60115644468252, 1.681762787392467, 0.2119510606497052, 16.46460034392374,
                          0.44301582782205307, 0.03313080577685456, 0.009111691405619932, 0.13087143523737077,
                          0.24947030411476415, 0.08636447128269253, 29.08967046967042, 0.061675624446615264,
                          2.8321081434253936, 0.05786193844421406, 0.004811865351961049, 0.04668459828470552,
                          13.711196754778042, 1.33854078932536, 0.19829181932064333, 16.97193228588179,
                          0.30600496039597413, 0.04307912168919234, 0.009899550520496958, 0.16349308914135322,
                          0.2648643294032999, 1.922855199635483, 1.1735100511908742E-6, 2.255070933410982E-4,
                          2.8026283352518977E-4, 0.0, 0.0, 0.0, 1.2450586842067783E-6, 5.324548384808068E-6,
                          2.7775238365914333E-4, 0.001044161736504531, 2.060862728707965E-4, 2.24500001877459E-6, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latesender_aggregate', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latesender_aggregate_inclusive(self):
        correct_values = [187.75560048280414, 8.963536970059041E-4, 2.2015640402880385E-4, 3.463163523317766E-6,
                          1.5450203712096344E-7, 2.4063431727891355E-4, 3.8180917985557155E-5, 2.8357186364524222E-5,
                          2.459480734823617E-4, 6.990985156917139E-5, 0.21492463017427327, 1.590549836388854E-5,
                          0.02130657398287921, 0.20197209433347368, 2.110586806393961E-5, 187.30129090520614,
                          6.956842205942879, 0.09694727466222777, 0.10719010608157527, 1.22417933336784,
                          3.8459597526532834, 39.18929041519274, 24.3389001712354, 0.038812934830947145,
                          2.1278040569459553, 0.030941546939827768, 0.04437564687520261, 0.039449328410544375,
                          4.866852599408024, 0.7126381177168859, 0.28090974384817996, 6.583312728875736,
                          0.3062606663352321, 0.029960783177275182, 0.03591673814658054, 0.032129759319230775,
                          0.13175676562814076, 74.03904007603023, 33.04505479724186, 0.06437368138966393,
                          4.2221457058344045, 0.06411240806586149, 0.0695382457759154, 0.06349128824304737,
                          17.60115644468252, 1.681762787392467, 0.2119510606497052, 16.46460034392374,
                          0.47614663359890763, 0.03313080577685456, 0.1399831266429907, 0.13087143523737077,
                          0.24947030411476415, 65.18647981136216, 29.34963791343768, 0.061675624446615264,
                          2.889970081869608, 0.05786193844421406, 0.051496463636666566, 0.04668459828470552,
                          13.711196754778042, 1.33854078932536, 0.19829181932064333, 16.97193228588179,
                          0.3490840820851665, 0.04307912168919234, 0.17339263966185017, 0.16349308914135322,
                          0.2648643294032999, 1.922855199635483, 1.1735100511908742E-6, 2.255070933410982E-4,
                          2.8026283352518977E-4, 0.0, 0.0, 0.0, 0.0015368150001222602, 2.830769320439514E-4,
                          2.7775238365914333E-4, 0.0012524930093941022, 2.060862728707965E-4, 2.24500001877459E-6, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latesender_aggregate', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latesender_exclusive(self):
        correct_values = [0.0010713235377579622, 1.2814458327764283E-4, 8.297930257425351E-5, 2.4550503146885526E-6,
                          1.0974264713341275E-7, 1.934116050337083E-4, 1.3734030309858313E-5, 2.327143610631541E-5,
                          1.880028534759836E-4, 5.820425789473461E-5, 0.18565766158601718, 1.4110742408981197E-5,
                          0.017682834255872474, 0.1771935522614092, 1.79231621976664E-5, 0.005100992542026006,
                          1.1815183732817527, 0.07981311643313939, 0.06361099477446205, 0.6263213194235028,
                          1.8803481682680547, 0.017276354969816055, 10.170997926048907, 0.015958933851961857,
                          0.8354700551736214, 0.011462094905575735, 0.0019101897768842614, 0.01544101443830695,
                          1.856194158363053, 0.309760626181439, 0.12958280828294233, 2.71622940464512,
                          0.09258657398576806, 0.008413027490130447, 0.0015808694656106355, 0.013654204232667808,
                          0.057085926911255275, 0.03894651688349171, 11.592143696281557, 0.023016627474285123,
                          1.4636148084199492, 0.018736182876993964, 0.002320457660571703, 0.026949183442874756,
                          6.023815286790118, 0.669707954196925, 0.06907382358006277, 5.979518944404416,
                          0.16902464634482883, 0.01830819221314337, 0.0042690500129233325, 0.050631641389178306,
                          0.10134687249008088, 0.04028984691753479, 10.695527174349202, 0.02595484306736376,
                          1.1786731365478502, 0.019586308525043717, 0.002036289416572263, 0.026135917382968075,
                          4.840435181609092, 0.5591989522391536, 0.07686437534742263, 6.9396706042058085,
                          0.11753457674929434, 0.02610952765972892, 0.004773838928648022, 0.06749574782535861,
                          0.11238383102517867, 1.6449062853008503, 7.295327344140207E-7, 1.3577949793093164E-4,
                          1.9728642927627574E-4, 0.0, 0.0, 0.0, 1.2450586842067783E-6, 5.324548384808068E-6,
                          2.7775238365914333E-4, 0.001044161736504531, 2.060862728707965E-4, 2.24500001877459E-6, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latesender', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latesender_inclusive(self):
        correct_values = [73.1035157838718, 4.208343141572849E-4, 8.297930257425351E-5, 2.4550503146885526E-6,
                          1.0974264713341275E-7, 1.934116050337083E-4, 1.3734030309858313E-5, 2.327143610631541E-5,
                          1.880028534759836E-4, 5.820425789473461E-5, 0.18565766158601718, 1.4110742408981197E-5,
                          0.017682834255872474, 0.1771935522614092, 1.79231621976664E-5, 72.71931745500446,
                          3.8316119721809114, 0.07981311643313939, 0.06361099477446205, 0.6263213194235028,
                          1.8803481682680547, 16.25360416872306, 10.316539668183811, 0.015958933851961857,
                          0.8469321500791971, 0.011462094905575735, 0.01735120421519121, 0.01544101443830695,
                          1.856194158363053, 0.309760626181439, 0.12958280828294233, 2.71622940464512,
                          0.10099960147589851, 0.008413027490130447, 0.015235073698278444, 0.013654204232667808,
                          0.057085926911255275, 26.251423884461396, 11.684234147335905, 0.023016627474285123,
                          1.482350991296943, 0.018736182876993964, 0.02926964110344646, 0.026949183442874756,
                          6.023815286790118, 0.669707954196925, 0.06907382358006277, 5.979518944404416,
                          0.1873328385579722, 0.01830819221314337, 0.05490069140210164, 0.050631641389178306,
                          0.10134687249008088, 24.73267015179622, 10.798346392763989, 0.02595484306736376,
                          1.1982594450728938, 0.019586308525043717, 0.02817220679954034, 0.026135917382968075,
                          4.840435181609092, 0.5591989522391536, 0.07686437534742263, 6.9396706042058085,
                          0.14364410440902325, 0.02610952765972892, 0.07226958675400663, 0.06749574782535861,
                          0.11238383102517867, 1.6449062853008503, 7.295327344140207E-7, 1.3577949793093164E-4,
                          1.9728642927627574E-4, 0.0, 0.0, 0.0, 0.0015368150001222602, 2.830769320439514E-4,
                          2.7775238365914333E-4, 0.0012524930093941022, 2.060862728707965E-4, 2.24500001877459E-6, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latesender', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latesender_longterm_exclusive(self):
        correct_values = [0.011713616957734985, 2.656198088745481E-4, 1.3717710145455024E-4, 1.0081132086292133E-6,
                          4.475938998755066E-8, 4.722271224520518E-5, 2.4446887675698852E-5, 5.085750258208818E-6,
                          5.7945220006378175E-5, 1.17055936744368E-5, 0.02926696858825612, 1.7947559549073428E-6,
                          0.0036237397270067343, 0.02477854207206441, 3.1827058662732104E-6, 0.0016822045007529596,
                          0.5010473658961971, 0.017134158229088352, 0.04357911130711325, 0.597858013944337,
                          1.9656115843852295, 0.024196569055753514, 13.84817956650736, 0.022854000978985295,
                          1.2613924548325068, 0.019479452034252033, 0.003016128687773987, 0.02400831397223743,
                          3.0106584410449733, 0.40287749153544694, 0.15132693556523769, 3.8670833242306166,
                          0.18371330917218875, 0.02154775568714475, 0.0022061093617391225, 0.018475555086562966,
                          0.07467083871688547, 0.05023516993912125, 21.17658635892094, 0.0413570539153788,
                          2.694418489348595, 0.04537622518886753, 0.0037264998722963336, 0.03654210480017261,
                          11.577341157892409, 1.0120548331955421, 0.1428772370696424, 10.485081399519332,
                          0.2739911814772243, 0.01482261356371119, 0.0048426413926965645, 0.08023979384819249,
                          0.14812343162468328, 0.046074624365168404, 18.39414329532121, 0.03572078137925152,
                          1.6534350068775427, 0.03827562991917035, 0.0027755759353887896, 0.02054868090173742,
                          8.870761573168949, 0.7793418370862067, 0.12142744397322075, 10.03226168167598,
                          0.18847038364667992, 0.01696959402946342, 0.005125711591848978, 0.09599734131599459,
                          0.15248049837812122, 0.27794891433463303, 4.4397731677685345E-7, 8.972759541016661E-5,
                          8.297640424891406E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latesender_longterm', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latesender_longterm_inclusive(self):
        correct_values = [114.65208469893238, 4.755193828486191E-4, 1.3717710145455024E-4, 1.0081132086292133E-6,
                          4.475938998755066E-8, 4.722271224520518E-5, 2.4446887675698852E-5, 5.085750258208818E-6,
                          5.7945220006378175E-5, 1.17055936744368E-5, 0.02926696858825612, 1.7947559549073428E-6,
                          0.0036237397270067343, 0.02477854207206441, 3.1827058662732104E-6, 114.58197345020174,
                          3.125230233761965, 0.017134158229088352, 0.04357911130711325, 0.597858013944337,
                          1.9656115843852295, 22.935686246469658, 14.022360503051583, 0.022854000978985295,
                          1.280871906866759, 0.019479452034252033, 0.027024442660011416, 0.02400831397223743,
                          3.0106584410449733, 0.40287749153544694, 0.15132693556523769, 3.8670833242306166,
                          0.20526106485933351, 0.02154775568714475, 0.02068166444830209, 0.018475555086562966,
                          0.07467083871688547, 47.78761619156881, 21.36082064990596, 0.0413570539153788,
                          2.739794714537463, 0.04537622518886753, 0.04026860467246894, 0.03654210480017261,
                          11.577341157892409, 1.0120548331955421, 0.1428772370696424, 10.485081399519332,
                          0.28881379504093546, 0.01482261356371119, 0.08508243524088906, 0.08023979384819249,
                          0.14812343162468328, 40.453809659565934, 18.551291520673683, 0.03572078137925152,
                          1.6917106367967132, 0.03827562991917035, 0.02332425683712621, 0.02054868090173742,
                          8.870761573168949, 0.7793418370862067, 0.12142744397322075, 10.03226168167598,
                          0.20543997767614333, 0.01696959402946342, 0.10112305290784357, 0.09599734131599459,
                          0.15248049837812122, 0.27794891433463303, 4.4397731677685345E-7, 8.972759541016661E-5,
                          8.297640424891406E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latesender_longterm', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latereceiver_aggregate_exclusive(self):
        correct_values = [0.010696684106960674, 2.764240537862565E-4, 1.7088000461953969E-4, 2.3697734172739933E-6,
                          1.0204833927955464E-7, 8.024821370050036E-5, 2.059208363750254E-5, 7.615750056961936E-6,
                          1.0966099131839295E-4, 2.759490337921792E-5, 0.05590295324158772, 4.730797120355205E-6,
                          0.007729965145803331, 0.045990843379636805, 6.972898347980803E-6, 0.003447274648038956,
                          2.092586221289123, 0.03355161150914592, 0.16701686802050417, 2.0749774850825298,
                          5.846521272870203, 0.06181037207063156, 30.47498334754814, 0.04950759369094108,
                          2.740591333704475, 0.08048353525980853, 0.010678602306078047, 0.053180937864471714,
                          13.364911777054447, 0.972741963965525, 0.35835960941213335, 8.595408493851075,
                          0.34204792670553197, 0.11354467364937257, 0.005426364607962968, 0.011637672898897423,
                          0.13693778606456933, 0.047841526074677176, 29.37305265235884, 0.04594461375803257,
                          3.4603343249047884, 0.1689876179532291, 0.005831788797500393, 0.025545618824564947,
                          19.820357531932366, 1.4433899725954895, 0.04770049865724154, 3.7173118034789336,
                          0.1021995121979777, 0.056307420011125944, 0.0029915304810335594, 0.035250755288799354,
                          0.05801069774855298, 0.04073549067629045, 27.070119511986157, 0.048984535122973225,
                          2.421344330642034, 0.13079133246470218, 0.004678006062197919, 0.022387039705702258,
                          14.112182129759121, 1.223261226641711, 0.03825830408537365, 3.4651260943699125,
                          0.06317952217052035, 0.06098228684034683, 0.002784279943308446, 0.03450872599217253,
                          0.0544918008386948, 0.6331650203132726, 1.3216420427942382E-6, 2.478404605988209E-4,
                          2.9276492726025343E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latereceiver_aggregate', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latereceiver_aggregate_inclusive(self):
        correct_values = [175.54995979117282, 5.506161775003526E-4, 1.7088000461953969E-4, 2.3697734172739933E-6,
                          1.0204833927955464E-7, 8.024821370050036E-5, 2.059208363750254E-5, 7.615750056961936E-6,
                          1.0966099131839295E-4, 2.759490337921792E-5, 0.05590295324158772, 4.730797120355205E-6,
                          0.007729965145803331, 0.045990843379636805, 6.972898347980803E-6, 175.42839022675125,
                          10.214653458771506, 0.03355161150914592, 0.16701686802050417, 2.0749774850825298,
                          5.846521272870203, 57.37225199065406, 30.882850550651213, 0.04950759369094108,
                          2.8210748689642835, 0.08048353525980853, 0.06385954017054976, 0.053180937864471714,
                          13.364911777054447, 0.972741963965525, 0.35835960941213335, 8.595408493851075,
                          0.45559260035490456, 0.11354467364937257, 0.01706403750686039, 0.011637672898897423,
                          0.13693778606456933, 58.41105786506315, 29.466697764774114, 0.04594461375803257,
                          3.6293219428580175, 0.1689876179532291, 0.03137740762206534, 0.025545618824564947,
                          19.820357531932366, 1.4433899725954895, 0.04770049865724154, 3.7173118034789336,
                          0.15850693220910364, 0.056307420011125944, 0.038242285769832914, 0.035250755288799354,
                          0.05801069774855298, 48.79381461730122, 27.157362351194504, 0.048984535122973225,
                          2.5521356631067365, 0.13079133246470218, 0.027065045767900177, 0.022387039705702258,
                          14.112182129759121, 1.223261226641711, 0.03825830408537365, 3.4651260943699125,
                          0.12416180901086718, 0.06098228684034683, 0.037293005935480975, 0.03450872599217253,
                          0.0544918008386948, 0.6331650203132726, 1.3216420427942382E-6, 2.478404605988209E-4,
                          2.9276492726025343E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latereceiver_aggregate', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latereceiver_exclusive(self):
        correct_values = [3.469912564924016E-4, 3.57956236407863E-5, 1.4592479318571857E-5, 8.998651862029089E-7,
                          5.477969446629644E-8, 3.283870019304212E-5, 2.0640253961358754E-6, 2.6052728826240794E-6,
                          4.4494903964612004E-5, 1.1086400011140719E-5, 0.003537636305626132, 1.265731860172465E-6,
                          0.0037730639071542975, 0.012293328957840959, 2.390347376371032E-6, 0.0015693634352800245,
                          1.3649721443107543, 0.012820999385924745, 0.09395219178382705, 1.3605289552255675,
                          3.4827306470115507, 0.03074402507935048, 18.532888879590306, 0.025588438871613686,
                          1.25052065722502, 0.05213285153552972, 0.004351188750984123, 0.015361885312263056,
                          7.181087344700206, 0.47581782049263416, 0.18409195592311292, 5.204675756301115,
                          0.17376470724869636, 0.06310706446183649, 0.0030578843587042506, 0.00524568861380123,
                          0.07496954418601384, 0.02593126601794893, 19.569737336235143, 0.027988028474612577,
                          2.005561328350185, 0.11367006849812139, 0.0037306238895572514, 0.012914323368493559,
                          12.401620784178574, 0.8654949845583101, 0.01959619332651651, 1.593372647208628,
                          0.04146498471529752, 0.04271363648073879, 0.0014295521355949976, 0.015689449531511947,
                          0.024201817521524244, 0.024209642992310876, 19.16740012519306, 0.031182193574045,
                          1.5012789575731367, 0.09410913393482559, 0.003354136325544434, 0.012486232589690909,
                          9.862966268366915, 0.8240760991774372, 0.016667198141452948, 1.503643085897274,
                          0.028913109279083464, 0.046438066716886446, 0.0013943804681932036, 0.01363478888495085,
                          0.023704182536936336, 0.2523323018286318, 4.516493532973154E-7, 1.11009780523308E-4,
                          1.0582847920687221E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latereceiver', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latereceiver_inclusive(self):
        correct_values = [109.78720332024092, 8.624547342920536E-5, 1.4592479318571857E-5, 8.998651862029089E-7,
                          5.477969446629644E-8, 3.283870019304212E-5, 2.0640253961358754E-6, 2.6052728826240794E-6,
                          4.4494903964612004E-5, 1.1086400011140719E-5, 0.003537636305626132, 1.265731860172465E-6,
                          0.0037730639071542975, 0.012293328957840959, 2.390347376371032E-6, 109.7668869217752,
                          6.3150049377176245, 0.012820999385924745, 0.09395219178382705, 1.3605289552255675,
                          3.4827306470115507, 33.277405692651186, 18.742569274385033, 0.025588438871613686,
                          1.3026535087605497, 0.05213285153552972, 0.01971307406324718, 0.015361885312263056,
                          7.181087344700206, 0.47581782049263416, 0.18409195592311292, 5.204675756301115,
                          0.23687177171053284, 0.06310706446183649, 0.008303572972505481, 0.00524568861380123,
                          0.07496954418601384, 36.76511702449075, 19.61732155803627, 0.027988028474612577,
                          2.1192313968483063, 0.11367006849812139, 0.01664494725805081, 0.012914323368493559,
                          12.401620784178574, 0.8654949845583101, 0.01959619332651651, 1.593372647208628,
                          0.08417862119603631, 0.04271363648073879, 0.017119001667106944, 0.015689449531511947,
                          0.024201817521524244, 33.15545760165174, 19.215249516908557, 0.031182193574045,
                          1.5953880915079623, 0.09410913393482559, 0.015840368915235343, 0.012486232589690909,
                          9.862966268366915, 0.8240760991774372, 0.016667198141452948, 1.503643085897274,
                          0.07535117599596991, 0.046438066716886446, 0.015029169353144054, 0.01363478888495085,
                          0.023704182536936336, 0.2523323018286318, 4.516493532973154E-7, 1.11009780523308E-4,
                          1.0582847920687221E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latereceiver', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latereceiver_longterm_exclusive(self):
        correct_values = [0.01034969285041143, 2.4062843014547046E-4, 1.5628752530096783E-4, 1.4699082310710845E-6,
                          4.726864481325818E-8, 4.7409513507458234E-5, 1.8528058241366665E-5, 5.010477174337855E-6,
                          6.516608735378093E-5, 1.6508503368077203E-5, 0.052365316935961574, 3.4650652601827387E-6,
                          0.003956901238649034, 0.03369751442179585, 4.5825509716097715E-6, 0.001877911212801564,
                          0.7276140769783672, 0.020730612123221182, 0.07306467623667713, 0.7144485298569628,
                          2.363790625858652, 0.031066346991284632, 11.942094467957835, 0.023919154819327382,
                          1.4900706764794545, 0.028350683724278826, 0.006327413555093954, 0.03781905255220865,
                          6.18382443235424, 0.49692414347289093, 0.1742676534890204, 3.3907327375499596,
                          0.1682832194568355, 0.05043760918753608, 0.002368480249258725, 0.0063919842850961904,
                          0.0619682418785555, 0.021910260056738906, 9.803315316123694, 0.017956585283419993,
                          1.4547729965546032, 0.05531754945510776, 0.002101164907943147, 0.01263129545607139,
                          7.418736747753795, 0.5778949880371792, 0.02810430533072504, 2.1239391562703043,
                          0.060734527482680135, 0.013593783530387182, 0.0015619783454385548, 0.01956130575728741,
                          0.033808880227028736, 0.016525847684006223, 7.902719386793092, 0.017802341548928232,
                          0.9200653730688975, 0.03668219852987662, 0.00132386973665349, 0.009900807116011339,
                          4.249215861392209, 0.3991851274642739, 0.02159110594392068, 1.9614830084726371,
                          0.03426641289143683, 0.014544220123460358, 0.0013898994751152804, 0.020873937107221668,
                          0.0307876183017585, 0.3808327184846409, 8.699926894969232E-7, 1.3683068007551292E-4,
                          1.869364480533812E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latereceiver_longterm', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_latereceiver_longterm_inclusive(self):
        correct_values = [65.76275647093193, 4.6437070407114755E-4, 1.5628752530096783E-4, 1.4699082310710845E-6,
                          4.726864481325818E-8, 4.7409513507458234E-5, 1.8528058241366665E-5, 5.010477174337855E-6,
                          6.516608735378093E-5, 1.6508503368077203E-5, 0.052365316935961574, 3.4650652601827387E-6,
                          0.003956901238649034, 0.03369751442179585, 4.5825509716097715E-6, 65.6615033049761,
                          3.8996485210538805, 0.020730612123221182, 0.07306467623667713, 0.7144485298569628,
                          2.363790625858652, 24.09484629800288, 12.140281276266183, 0.023919154819327382,
                          1.5184213602037333, 0.028350683724278826, 0.04414646610730261, 0.03781905255220865,
                          6.18382443235424, 0.49692414347289093, 0.1742676534890204, 3.3907327375499596,
                          0.21872082864437156, 0.05043760918753608, 0.008760464534354915, 0.0063919842850961904,
                          0.0619682418785555, 21.6459408405724, 9.849376206737839, 0.017956585283419993,
                          1.510090546009711, 0.05531754945510776, 0.014732460364014537, 0.01263129545607139,
                          7.418736747753795, 0.5778949880371792, 0.02810430533072504, 2.1239391562703043,
                          0.07432831101306732, 0.013593783530387182, 0.021123284102725966, 0.01956130575728741,
                          0.033808880227028736, 15.638357015649497, 7.942112834285941, 0.017802341548928232,
                          0.9567475715987741, 0.03668219852987662, 0.011224676852664829, 0.009900807116011339,
                          4.249215861392209, 0.3991851274642739, 0.02159110594392068, 1.9614830084726371,
                          0.04881063301489719, 0.014544220123460358, 0.022263836582336948, 0.020873937107221668,
                          0.0307876183017585, 0.3808327184846409, 8.699926894969232E-7, 1.3683068007551292E-4,
                          1.869364480533812E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_latereceiver_longterm', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_collective_exclusive(self):
        correct_values = [0.036932359155748884, 7.601984749820419E-4, 4.940921731401574E-4, 2.0221816256526487E-6,
                          1.2912361646994825E-7, 1.0197634620900415E-4, 6.037908412678013E-5, 3.7067207102334776E-5,
                          8.071491267205281E-5, 2.3169077700577778E-5, 0.36067480103778565, 9.72267086198279E-6,
                          0.003168310135284719, 0.035235927172230286, 1.4401518524715869E-5, 3.5491299655482367E-4,
                          0.008227293786877872, 5.565879270402139E-4, 4.97731031236112E-5, 0.01019461267879216,
                          0.021196350788159544, 1.6959099061242267E-4, 0.09612790772670934, 8.726254359543438E-5,
                          0.004301628340709381, 1.4544726899537946E-4, 1.1759468776043611E-5, 1.5977716726808586E-4,
                          0.03261252276040896, 0.0013922447081528998, 6.632134991919895E-4, 0.02734823754519161,
                          9.269666418291992E-4, 1.9031081412764292E-4, 1.0466251676052561E-5, 1.068937570376674E-4,
                          3.1110423408334785E-4, 3.6535108383664583E-4, 0.0807385749970519, 1.5241054219449624E-4,
                          0.010351192701946028, 5.845574388997404E-4, 9.440764724602416E-5, 3.2180222248996617E-4,
                          0.0412617097760698, 0.005640991175736148, 4.355841311099326E-4, 0.02403440061550168,
                          5.733843461943266E-4, 2.6117572881758256E-4, 2.3007665140925267E-5, 2.5254149265778637E-4,
                          5.347944456357826E-4, 2.5553824440992245E-4, 0.048931394705987306, 2.3597291956709785E-4,
                          0.010093737609897926, 2.434215061241653E-4, 6.578938533968346E-6, 1.6419239021412644E-4,
                          0.024911321233677078, 0.0022105542077343085, 2.9622594811600926E-4, 0.026744822485640227,
                          4.31444769572366E-4, 1.567559018307933E-4, 1.167796964166216E-4, 3.1560079948910944E-4,
                          3.1347810305625614E-4, 0.00828792144407573, 1.1372747836110179E-7, 3.8196031558498096E-7,
                          2.829641725544547E-7, 5.575196022007351E-7, 4.4486062002585515E-7, 1.4104358266435089E-9,
                          2.653934722016138E-5, 0.004004505169346415, 6.835430059651392E-4, 0.006203480614590723,
                          1.2358277969680146E-6, 1.0826048387264537E-4, 0.033360523561892556, 0.09356839816119343,
                          6.012747035845295E-4, 0.0, 0.0, 0.004018855811978028, 0.0, ]
        metric_values = self.get_values_for_metric('delay_collective', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_collective_inclusive(self):
        correct_values = [1.074660161315462, 0.001418797383700106, 4.940921731401574E-4, 2.0221816256526487E-6,
                          1.2912361646994825E-7, 1.0197634620900415E-4, 6.037908412678013E-5, 3.7067207102334776E-5,
                          8.071491267205281E-5, 2.3169077700577778E-5, 0.36067480103778565, 9.72267086198279E-6,
                          0.003168310135284719, 0.035235927172230286, 1.4401518524715869E-5, 0.4944864919137855,
                          0.0402246182839934, 5.565879270402139E-4, 4.97731031236112E-5, 0.01019461267879216,
                          0.021196350788159544, 0.1645653337183655, 0.09687838376949677, 8.726254359543438E-5,
                          0.004447075609704761, 1.4544726899537946E-4, 1.7153663604412947E-4, 1.5977716726808586E-4,
                          0.03261252276040896, 0.0013922447081528998, 6.632134991919895E-4, 0.02734823754519161,
                          0.001117277455956842, 1.9031081412764292E-4, 1.1736000871371996E-4, 1.068937570376674E-4,
                          3.1110423408334785E-4, 0.16562588601052877, 0.08132656967035634, 1.5241054219449624E-4,
                          0.010935750140845768, 5.845574388997404E-4, 4.162098697359903E-4, 3.2180222248996617E-4,
                          0.0412617097760698, 0.005640991175736148, 4.355841311099326E-4, 0.02403440061550168,
                          8.345600750119092E-4, 2.6117572881758256E-4, 2.7554915779871164E-4, 2.5254149265778637E-4,
                          5.347944456357826E-4, 0.11542781946026727, 0.04946359357367042, 2.3597291956709785E-4,
                          0.010337159116022092, 2.434215061241653E-4, 1.7077132874809478E-4, 1.6419239021412644E-4,
                          0.024911321233677078, 0.0022105542077343085, 2.9622594811600926E-4, 0.026744822485640227,
                          5.882006714031593E-4, 1.567559018307933E-4, 4.3238049590573103E-4, 3.1560079948910944E-4,
                          3.1347810305625614E-4, 0.00828792144407573, 1.1372747836110179E-7, 3.8196031558498096E-7,
                          2.829641725544547E-7, 5.575196022007351E-7, 4.4486062002585515E-7, 1.4104358266435089E-9,
                          0.13855776087546257, 0.004688048175311554, 6.835430059651392E-4, 0.13324189864934632,
                          1.2358277969680146E-6, 1.0826048387264537E-4, 0.033360523561892556, 0.09356839816119343,
                          6.012747035845295E-4, 0.0, 0.0, 0.004018855811978028, 0.0, ]
        metric_values = self.get_values_for_metric('delay_collective', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_barrier_aggregate_exclusive(self):
        correct_values = [0.0021192175116447887, 1.058821907095169E-4, 3.6530264847360444E-5, 5.376873691415298E-7,
                          1.1180481803573978E-7, 1.0102244274066669E-4, 5.133348969340396E-6, 3.7067207102334776E-5,
                          8.071491267205281E-5, 2.3169077700577778E-5, 0.36067480103778565, 9.72267086198279E-6,
                          0.003168310135284719, 0.035235927172230286, 1.4401518524715869E-5, 3.493621482126841E-4,
                          0.0053199222852715715, 4.5836231703662983E-4, 3.7082077105531156E-5, 0.009586654988665894,
                          0.008556198223171736, 1.5346326084847428E-4, 0.06382741267175931, 6.794281272534565E-5,
                          0.0039353238671945125, 1.311960317647777E-4, 1.1149073978004086E-5, 1.1953284274513893E-4,
                          0.03146652773988125, 0.0012567981174242036, 4.843040269232334E-4, 0.02272282204452826,
                          8.42075562942877E-4, 1.5221688115659758E-4, 9.66748850345534E-6, 9.682745246374895E-5,
                          2.649473350780563E-4, 3.126289720784825E-4, 0.04560809632975073, 1.2764309604100445E-4,
                          0.008834007488954222, 5.667889453102319E-4, 9.206948414772665E-5, 2.886448633612387E-4,
                          0.037338701633021984, 0.005277088686050333, 2.792769003258031E-4, 0.016706488728586176,
                          3.843629687851327E-4, 1.3855264626402828E-4, 2.0180344235446016E-5, 1.5966087503668956E-4,
                          4.548745021023264E-4, 1.7244657698453625E-4, 0.02990766303904943, 1.7337042339735822E-4,
                          0.008056946381527971, 1.7655708749433305E-4, 4.130541894453683E-6, 1.260561836819563E-4,
                          0.015521936307129922, 0.0010577593717621813, 1.2791535877825362E-4, 0.01780621332584231,
                          2.906015778908377E-4, 9.96549861192266E-5, 1.1411299723346685E-4, 2.096978137467569E-4,
                          2.30266759156609E-4, 0.005984622741009811, 1.1300392605450946E-7, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004018855811978028, 0.0, ]
        metric_values = self.get_values_for_metric('delay_barrier_aggregate', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_barrier_aggregate_inclusive(self):
        correct_values = [0.7521303249852975, 2.492177394540617E-4, 3.6530264847360444E-5, 5.376873691415298E-7,
                          1.1180481803573978E-7, 1.0102244274066669E-4, 5.133348969340396E-6, 3.7067207102334776E-5,
                          8.071491267205281E-5, 2.3169077700577778E-5, 0.36067480103778565, 9.72267086198279E-6,
                          0.003168310135284719, 0.035235927172230286, 1.4401518524715869E-5, 0.34649880718613224,
                          0.023958219891251364, 4.5836231703662983E-4, 3.7082077105531156E-5, 0.009586654988665894,
                          0.008556198223171736, 0.12554220720991727, 0.0643796595114079, 6.794281272534565E-5,
                          0.00406651989895929, 1.311960317647777E-4, 1.30681916723143E-4, 1.1953284274513893E-4,
                          0.03146652773988125, 0.0012567981174242036, 4.843040269232334E-4, 0.02272282204452826,
                          9.942924440994746E-4, 1.5221688115659758E-4, 1.0649494096720429E-4, 9.682745246374895E-5,
                          2.649473350780563E-4, 0.11658906646405154, 0.046015016326117535, 1.2764309604100445E-4,
                          0.009400796434264454, 5.667889453102319E-4, 3.8071434750896533E-4, 2.886448633612387E-4,
                          0.037338701633021984, 0.005277088686050333, 2.792769003258031E-4, 0.016706488728586176,
                          5.22915615049161E-4, 1.3855264626402828E-4, 1.7984121927213558E-4, 1.5966087503668956E-4,
                          4.548745021023264E-4, 0.07407532873168961, 0.030208948821225042, 1.7337042339735822E-4,
                          0.008233503469022305, 1.7655708749433305E-4, 1.3018672557640998E-4, 1.260561836819563E-4,
                          0.015521936307129922, 0.0010577593717621813, 1.2791535877825362E-4, 0.01780621332584231,
                          3.902565640100643E-4, 9.96549861192266E-5, 3.2381081098022374E-4, 2.096978137467569E-4,
                          2.30266759156609E-4, 0.005984622741009811, 1.1300392605450946E-7, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004018855811978028, 0.0, ]
        metric_values = self.get_values_for_metric('delay_barrier_aggregate', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_barrier_exclusive(self):
        correct_values = [5.163888576164011E-4, 6.800994169599055E-5, 1.0099953447212454E-5, 2.2847375864892823E-7,
                          1.0289856935751478E-7, 7.835037515724086E-5, 1.6268449288191062E-6, 3.657218264469662E-5,
                          7.145734777931068E-5, 1.723978811425723E-5, 0.35796073742021617, 9.571175931211092E-6,
                          6.049502263812164E-4, 0.02747838747849972, 1.4201692122755531E-5, 3.272728588849666E-4,
                          0.002897919319572186, 3.881361257827054E-4, 4.1292332171022385E-6, 0.00427348530558501,
                          0.002342796504768878, 3.431420899816656E-6, 0.007861032622599412, 1.5097367284701087E-5,
                          3.4952629377447324E-4, 0.0, 9.070647855072167E-7, 4.399043416769502E-5, 1.3330660010303742E-5,
                          1.4026870356783E-4, 1.2734672946527434E-4, 1.6110515509971956E-4, 1.2697042331063786E-4,
                          1.1305528563310169E-4, 3.994277201696457E-6, 1.8707720647967618E-6, 4.057089661213491E-6,
                          1.56588281715022E-4, 0.0015389590404484609, 5.0170997389280665E-5, 0.0039612920596401,
                          2.66691849692242E-5, 6.483819335997804E-5, 2.6573113143596276E-4, 0.008398516783470089,
                          0.004067223770048908, 3.784974548342366E-5, 8.219349360021588E-4, 9.136337763751218E-5,
                          1.3855264626402828E-4, 1.9801582379382067E-5, 5.855403280619541E-5, 4.827342238545394E-5,
                          3.09158009822591E-5, 0.002640014461356484, 7.698031531221598E-5, 0.0030253437094088613,
                          3.907238187886322E-5, 2.3158767537074707E-7, 1.260561836819563E-4, 0.0014256816471176622,
                          6.283615247730215E-4, 3.0720766155364944E-5, 0.0012888919847276795, 2.699544880589987E-5,
                          9.96549861192266E-5, 1.1372540521298342E-4, 3.5978193737840224E-5, 2.30266759156609E-4,
                          0.005984622741009811, 1.1300392605450946E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004018855811978028, 0.0, ]
        metric_values = self.get_values_for_metric('delay_barrier', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_barrier_inclusive(self):
        correct_values = [0.4456364502026514, 1.5841848755726942E-4, 1.0099953447212454E-5, 2.2847375864892823E-7,
                          1.0289856935751478E-7, 7.835037515724086E-5, 1.6268449288191062E-6, 3.657218264469662E-5,
                          7.145734777931068E-5, 1.723978811425723E-5, 0.35796073742021617, 9.571175931211092E-6,
                          6.049502263812164E-4, 0.02747838747849972, 1.4201692122755531E-5, 0.05474955672988432,
                          0.009906466488925882, 3.881361257827054E-4, 4.1292332171022385E-6, 0.00427348530558501,
                          0.002342796504768878, 0.008965984299526178, 0.008003476719349386, 1.5097367284701087E-5,
                          3.4952629377447324E-4, 0.0, 4.4897498953202235E-5, 4.399043416769502E-5,
                          1.3330660010303742E-5, 1.4026870356783E-4, 1.2734672946527434E-4, 1.6110515509971956E-4,
                          2.4002570894373954E-4, 1.1305528563310169E-4, 5.865049266493219E-6, 1.8707720647967618E-6,
                          4.057089661213491E-6, 0.019746319185435183, 0.0016269797833211653, 5.0170997389280665E-5,
                          0.003987961244609324, 2.66691849692242E-5, 3.305693247959408E-4, 2.6573113143596276E-4,
                          0.008398516783470089, 0.004067223770048908, 3.784974548342366E-5, 8.219349360021588E-4,
                          2.2991602390154045E-4, 1.3855264626402828E-4, 7.835561518557748E-5, 5.855403280619541E-5,
                          4.827342238545394E-5, 0.009818891156102297, 0.0027477155428240647, 7.698031531221598E-5,
                          0.0030644160912877247, 3.907238187886322E-5, 1.2628777135732704E-4, 1.260561836819563E-4,
                          0.0014256816471176622, 6.283615247730215E-4, 3.0720766155364944E-5, 0.0012888919847276795,
                          1.2665043492512647E-4, 9.96549861192266E-5, 1.4970359895082364E-4, 3.5978193737840224E-5,
                          2.30266759156609E-4, 0.005984622741009811, 1.1300392605450946E-7, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004018855811978028, 0.0, ]
        metric_values = self.get_values_for_metric('delay_barrier', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_barrier_longterm_exclusive(self):
        correct_values = [0.0016028286540283876, 3.787224901352636E-5, 2.643031140014799E-5, 3.0921361049260156E-7,
                          8.906248678225E-9, 2.2672067583425817E-5, 3.50650404052129E-6, 4.950244576381528E-7,
                          9.25756489274214E-6, 5.929289586320547E-6, 0.0027140636175694926, 1.51494930771697E-7,
                          0.0025633599089035027, 0.007757539693730566, 1.998264019603389E-7, 2.2089289327675843E-5,
                          0.0024220029656993845, 7.022619125392439E-5, 3.2952843888428916E-5, 0.005313169683080884,
                          0.006213401718402858, 1.5003183994867497E-4, 0.0559663800491599, 5.2845445440644554E-5,
                          0.003585797573420039, 1.311960317647777E-4, 1.0242009192496876E-5, 7.554240857744391E-5,
                          0.031453197079870945, 0.0011165294138563734, 3.5695729745795907E-4, 0.02256171688942854,
                          7.151051396322392E-4, 3.9161595523495887E-5, 5.673211301758871E-6, 9.495668039895219E-5,
                          2.6089024541684283E-4, 1.5604069036344315E-4, 0.044069137289302264, 7.747209865172379E-5,
                          0.004872715429314121, 5.401197603410077E-4, 2.7231290787748583E-5, 2.2913731925275934E-5,
                          0.028940184849551895, 0.0012098649160014244, 2.4142715484237943E-4, 0.01588455379258402,
                          2.929995911476206E-4, 0.0, 3.7876185606395543E-7, 1.0110684223049415E-4,
                          4.0660107971687246E-4, 1.4153077600227715E-4, 0.027267648577692948, 9.639010808514224E-5,
                          0.00503160267211911, 1.3748470561546984E-4, 3.898954219082924E-6, 0.0, 0.01409625466001226,
                          4.2939784698915983E-4, 9.719459262288869E-5, 0.01651732134111463, 2.6360612908493783E-4, 0.0,
                          3.8759202048343957E-7, 1.7371962000891668E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_barrier_longterm', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_barrier_longterm_inclusive(self):
        correct_values = [0.30649387478264606, 9.079925189679228E-5, 2.643031140014799E-5, 3.0921361049260156E-7,
                          8.906248678225E-9, 2.2672067583425817E-5, 3.50650404052129E-6, 4.950244576381528E-7,
                          9.25756489274214E-6, 5.929289586320547E-6, 0.0027140636175694926, 1.51494930771697E-7,
                          0.0025633599089035027, 0.007757539693730566, 1.998264019603389E-7, 0.2917492504562479,
                          0.01405175340232548, 7.022619125392439E-5, 3.2952843888428916E-5, 0.005313169683080884,
                          0.006213401718402858, 0.11657622291039108, 0.056376182792058506, 5.2845445440644554E-5,
                          0.0037169936051848164, 1.311960317647777E-4, 8.578441776994078E-5, 7.554240857744391E-5,
                          0.031453197079870945, 0.0011165294138563734, 3.5695729745795907E-4, 0.02256171688942854,
                          7.542667351557351E-4, 3.9161595523495887E-5, 1.0062989170071106E-4, 9.495668039895219E-5,
                          2.6089024541684283E-4, 0.09684274727861636, 0.04438803654279637, 7.747209865172379E-5,
                          0.005412835189655129, 5.401197603410077E-4, 5.014502271302452E-5, 2.2913731925275934E-5,
                          0.028940184849551895, 0.0012098649160014244, 2.4142715484237943E-4, 0.01588455379258402,
                          2.929995911476206E-4, 0.0, 1.014856040865581E-4, 1.0110684223049415E-4, 4.0660107971687246E-4,
                          0.06425643757558731, 0.027461233278400977, 9.639010808514224E-5, 0.00516908737773458,
                          1.3748470561546984E-4, 3.898954219082924E-6, 0.0, 0.01409625466001226, 4.2939784698915983E-4,
                          9.719459262288869E-5, 0.01651732134111463, 2.6360612908493783E-4, 0.0, 1.7410721202940012E-4,
                          1.7371962000891668E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_barrier_longterm', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_n2n_aggregate_exclusive(self):
        correct_values = [2.3482883468317617E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          5.550848342111836E-6, 0.002907371501606311, 9.8225610003584E-5, 1.2691026018080054E-5,
                          6.079576901262666E-4, 0.012640152564987803, 1.61277297639692E-5, 0.032300495054950036,
                          1.9319730870088746E-5, 3.6630447351486867E-4, 1.425123723060178E-5, 6.103947980395659E-7,
                          4.0244324522946916E-5, 0.0011459950205277274, 1.3544659072869616E-4, 1.789094722687561E-4,
                          0.004625415500663352, 8.489107888632203E-5, 3.8093932971045346E-5, 7.987631725972138E-7,
                          1.0066304573918459E-5, 4.6156899005291505E-5, 5.272211175821884E-5, 0.03513047866730121,
                          2.4767446153491828E-5, 0.001517185212991799, 1.7768493589508682E-5, 2.338163098297526E-6,
                          3.31573591287275E-5, 0.003923008143047805, 3.639024896858154E-4, 1.5630723078412958E-4,
                          0.007327911886915508, 1.8902137740919352E-4, 1.226230825535543E-4, 2.8273209054793596E-6,
                          9.288061762109665E-5, 7.991994353345626E-5, 8.309166742537233E-5, 0.019023731666937865,
                          6.260249616973969E-5, 0.0020367912283699528, 6.686441862983235E-5, 2.44839663951465E-6,
                          3.813620653217015E-5, 0.009389384926547168, 0.0011527948359721268, 1.683105893377556E-4,
                          0.008938609159797925, 1.408431916815283E-4, 5.71009157115667E-5, 2.666699183154805E-6,
                          1.0590298574235255E-4, 8.321134389964716E-5, 0.0023032987030659185, 7.23552306592337E-10,
                          3.8196031558498096E-7, 2.829641725544547E-7, 5.575196022007351E-7, 4.4486062002585515E-7,
                          1.4104358266435089E-9, 2.653934722016138E-5, 0.004004505169346415, 6.835430059651392E-4,
                          0.006203480614590723, 1.2358277969680146E-6, 1.0826048387264537E-4, 0.033360523561892556,
                          0.09356839816119343, 6.012747035845295E-4, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_n2n_aggregate', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_n2n_aggregate_inclusive(self):
        correct_values = [0.28654946333016124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.14798768472765328, 0.016266398392742045, 9.8225610003584E-5, 1.2691026018080054E-5,
                          6.079576901262666E-4, 0.012640152564987803, 0.03902312650844826, 0.03249872425808888,
                          1.9319730870088746E-5, 3.8055571074547043E-4, 1.425123723060178E-5, 4.085471932098648E-5,
                          4.0244324522946916E-5, 0.0011459950205277274, 1.3544659072869616E-4, 1.789094722687561E-4,
                          0.004625415500663352, 1.2298501185736737E-4, 3.8093932971045346E-5, 1.0865067746515673E-5,
                          1.0066304573918459E-5, 4.6156899005291505E-5, 0.04903681954647728, 0.03531155334423883,
                          2.4767446153491828E-5, 0.0015349537065813077, 1.7768493589508682E-5, 3.549552222702502E-5,
                          3.31573591287275E-5, 0.003923008143047805, 3.639024896858154E-4, 1.5630723078412958E-4,
                          0.007327911886915508, 3.116444599627478E-4, 1.226230825535543E-4, 9.5707938526576E-5,
                          9.288061762109665E-5, 7.991994353345626E-5, 0.04135249072857767, 0.01925464475244536,
                          6.260249616973969E-5, 0.002103655646999785, 6.686441862983235E-5, 4.05846031716848E-5,
                          3.813620653217015E-5, 0.009389384926547168, 0.0011527948359721268, 1.683105893377556E-4,
                          0.008938609159797925, 1.97944107393095E-4, 5.71009157115667E-5, 1.0856968492550735E-4,
                          1.0590298574235255E-4, 8.321134389964716E-5, 0.0023032987030659185, 7.23552306592337E-10,
                          3.8196031558498096E-7, 2.829641725544547E-7, 5.575196022007351E-7, 4.4486062002585515E-7,
                          1.4104358266435089E-9, 0.13855776087546257, 0.004688048175311554, 6.835430059651392E-4,
                          0.13324189864934632, 1.2358277969680146E-6, 1.0826048387264537E-4, 0.033360523561892556,
                          0.09356839816119343, 6.012747035845295E-4, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_n2n_aggregate', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_n2n_exclusive(self):
        correct_values = [1.8029502399652397E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          3.831385794086928E-6, 0.002728137260472786, 8.811383987854266E-5, 5.691596345406773E-8,
                          3.347582705605532E-4, 0.01192733522427693, 7.99125932307923E-6, 0.023690021291478052, 0.0,
                          0.0, 3.208495993354722E-6, 0.0, 3.52947452581988E-5, 6.301772743863318E-4,
                          4.515585268163271E-6, 8.529095356302018E-6, 0.00272442718741202, 6.0481965395479465E-5,
                          2.7198649155497446E-5, 1.5748681878101013E-7, 6.679414666707138E-6, 3.514873665112393E-5,
                          3.7607730521475174E-5, 0.022444539280314493, 0.0, 1.5951590600345735E-6,
                          2.0478114667742423E-6, 1.6715846381205436E-6, 2.7263873842089183E-5, 3.0276044550061866E-4,
                          0.0, 1.3387854368331147E-5, 0.001958995957759435, 8.796980456964051E-5, 1.1289385460016939E-4,
                          1.5428730705735531E-6, 4.891397494080349E-5, 5.76971308334358E-5, 6.446105415944606E-5,
                          0.0060322318939925335, 7.995794506958685E-8, 2.649627130903041E-4, 4.3117994169625395E-5,
                          1.0410875193297036E-6, 2.322926661901873E-5, 0.004579435426268846, 1.299163754947249E-5,
                          4.250429713942406E-6, 0.0029484531739938586, 1.5928953583450322E-5, 4.8890477796147564E-5,
                          8.290011305622322E-7, 2.504732720852655E-5, 3.758316140976601E-5, 0.0020978993302903457,
                          4.9554302206685967E-11, 3.3563064094854375E-7, 3.339246914820027E-8, 5.575196022007351E-7,
                          4.4486062002585515E-7, 1.4104358266435089E-9, 2.653934722016138E-5, 0.004004505169346415,
                          6.835430059651392E-4, 0.006203480614590723, 1.2358277969680146E-6, 1.0826048387264537E-4,
                          0.033360523561892556, 0.09356839816119343, 6.012747035845295E-4, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_n2n', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_n2n_inclusive(self):
        correct_values = [0.22217632099506068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0836153843060357, 0.015078401511152265, 8.811383987854266E-5, 5.691596345406773E-8,
                          3.347582705605532E-4, 0.01192733522427693, 0.02723383118716309, 0.023698550386834355, 0.0,
                          3.208495993354722E-6, 3.208495993354722E-6, 3.52947452581988E-5, 3.52947452581988E-5,
                          6.301772743863318E-4, 4.515585268163271E-6, 8.529095356302018E-6, 0.00272442718741202,
                          8.768061455097691E-5, 2.7198649155497446E-5, 6.836901485488148E-6, 6.679414666707138E-6,
                          3.514873665112393E-5, 0.025098887335485997, 0.022457927134682823, 0.0, 3.642970526808816E-6,
                          2.0478114667742423E-6, 2.8935458480209727E-5, 2.7263873842089183E-5, 3.0276044550061866E-4,
                          0.0, 1.3387854368331147E-5, 0.001958995957759435, 2.008636591698099E-4, 1.1289385460016939E-4,
                          5.045684801137704E-5, 4.891397494080349E-5, 5.76971308334358E-5, 0.014102533556149901,
                          0.0060365622816515455, 7.995794506958685E-8, 3.0808070725992946E-4, 4.3117994169625395E-5,
                          2.4270354138348434E-5, 2.322926661901873E-5, 0.004579435426268846, 1.299163754947249E-5,
                          4.250429713942406E-6, 0.0029484531739938586, 6.481943137959789E-5, 4.8890477796147564E-5,
                          2.587632833908878E-5, 2.504732720852655E-5, 3.758316140976601E-5, 0.0020978993302903457,
                          4.9554302206685967E-11, 3.3563064094854375E-7, 3.339246914820027E-8, 5.575196022007351E-7,
                          4.4486062002585515E-7, 1.4104358266435089E-9, 0.13855776087546257, 0.004688048175311554,
                          6.835430059651392E-4, 0.13324189864934632, 1.2358277969680146E-6, 1.0826048387264537E-4,
                          0.033360523561892556, 0.09356839816119343, 6.012747035845295E-4, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_n2n', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_n2n_longterm_exclusive(self):
        correct_values = [5.453381069775443E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          1.7194625479971526E-6, 1.7923424113352603E-4, 1.011177012504132E-5, 1.2634110054625987E-5,
                          2.7319941956571346E-4, 7.128173407108722E-4, 8.136470440909052E-6, 0.008610473763471975,
                          1.9319730870088746E-5, 3.6630447351486867E-4, 1.1042741237247058E-5, 6.103947980395692E-7,
                          4.949579264748119E-6, 5.158177461413958E-4, 1.3093100546053292E-4, 1.7038037691245408E-4,
                          0.0019009883132513313, 2.4409113490842568E-5, 1.0895283815547883E-5, 6.41276353816205E-7,
                          3.386889907211318E-6, 1.1008162354167569E-5, 1.5114381236736724E-5, 0.01268593938698671,
                          2.4767446153491828E-5, 0.0015155900539317645, 1.5720682122734438E-5, 6.66578460176984E-7,
                          5.89348528663831E-6, 0.0036202476975471854, 3.639024896858154E-4, 1.429193764157984E-4,
                          0.005368915929156074, 1.010515728395531E-4, 9.729227953384875E-6, 1.2844478349058065E-6,
                          4.396664268029317E-5, 2.2222812700020472E-5, 1.863061326592974E-5, 0.01299149977294533,
                          6.252253822467011E-5, 0.001771828515279649, 2.3746424460206955E-5, 1.4073091201849464E-6,
                          1.4906939913151426E-5, 0.0048099495002783205, 0.0011398031984226542, 1.640601596238132E-4,
                          0.005990155985804065, 1.2491423809807796E-4, 8.210437915419143E-6, 1.837698052592566E-6,
                          8.0855658533826E-5, 4.562818248988116E-5, 2.0539937277557304E-4, 6.73998004385651E-10,
                          4.6329674636437284E-8, 2.4957170340625443E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_n2n_longterm', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_n2n_longterm_inclusive(self):
        correct_values = [0.06437314233510061, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.06437230042161758, 0.001187996881589779, 1.011177012504132E-5, 1.2634110054625987E-5,
                          2.7319941956571346E-4, 7.128173407108722E-4, 0.011789295321285176, 0.008800173871254518,
                          1.9319730870088746E-5, 3.773472147521157E-4, 1.1042741237247058E-5, 5.559974062787688E-6,
                          4.949579264748119E-6, 5.158177461413958E-4, 1.3093100546053292E-4, 1.7038037691245408E-4,
                          0.0019009883132513313, 3.530439730639045E-5, 1.0895283815547883E-5, 4.028166261027523E-6,
                          3.386889907211318E-6, 1.1008162354167569E-5, 0.023937932210991286, 0.012853626209556001,
                          2.4767446153491828E-5, 0.001531310736054499, 1.5720682122734438E-5, 6.560063746815294E-6,
                          5.89348528663831E-6, 0.0036202476975471854, 3.639024896858154E-4, 1.429193764157984E-4,
                          0.005368915929156074, 1.1078080079293798E-4, 9.729227953384875E-6, 4.525109051519898E-5,
                          4.396664268029317E-5, 2.2222812700020472E-5, 0.027249957172427768, 0.013218082470793813,
                          6.252253822467011E-5, 0.0017955749397398561, 2.3746424460206955E-5, 1.6314249033336372E-5,
                          1.4906939913151426E-5, 0.0048099495002783205, 0.0011398031984226542, 1.640601596238132E-4,
                          0.005990155985804065, 1.3312467601349711E-4, 8.210437915419143E-6, 8.269335658641857E-5,
                          8.0855658533826E-5, 4.562818248988116E-5, 2.0539937277557304E-4, 6.73998004385651E-10,
                          4.6329674636437284E-8, 2.4957170340625443E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_n2n_longterm', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_12n_aggregate_exclusive(self):
        correct_values = [0.0348107933557573, 6.543162842725254E-4, 4.5756190829279687E-4, 1.484494256511119E-6,
                          1.7318798434208477E-8, 9.539034683374547E-7, 5.524573515743975E-5, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, ]
        metric_values = self.get_values_for_metric('delay_12n_aggregate', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_12n_aggregate_inclusive(self):
        correct_values = [0.03598037300000334, 0.0011695796442460448, 4.5756190829279687E-4, 1.484494256511119E-6,
                          1.7318798434208477E-8, 9.539034683374547E-7, 5.524573515743975E-5, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, ]
        metric_values = self.get_values_for_metric('delay_12n_aggregate', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_12n_exclusive(self):
        correct_values = [0.0348107933557573, 6.543162842725254E-4, 4.5756190829279687E-4, 1.484494256511119E-6,
                          1.7318798434208477E-8, 9.539034683374547E-7, 5.524573515743975E-5, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, ]
        metric_values = self.get_values_for_metric('delay_12n', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_12n_inclusive(self):
        correct_values = [0.03598037300000334, 0.0011695796442460448, 4.5756190829279687E-4, 1.484494256511119E-6,
                          1.7318798434208477E-8, 9.539034683374547E-7, 5.524573515743975E-5, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, ]
        metric_values = self.get_values_for_metric('delay_12n', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_12n_longterm_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_12n_longterm', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_12n_longterm_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_12n_longterm', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_omp_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_omp', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_omp_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_omp', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompbarrier_aggregate_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompbarrier_aggregate', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompbarrier_aggregate_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompbarrier_aggregate', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompbarrier_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompbarrier', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompbarrier_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompbarrier', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompbarrier_longterm_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompbarrier_longterm', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompbarrier_longterm_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompbarrier_longterm', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompidle_aggregate_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompidle_aggregate', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompidle_aggregate_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompidle_aggregate', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompidle_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompidle', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompidle_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompidle', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompidle_longterm_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompidle_longterm', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_delay_ompidle_longterm_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('delay_ompidle_longterm', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_waitstates_propagating_vs_terminal_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          5.6843418860808015E-14, 0.0, 0.0, 0.0, 23.704618661000485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 100.00235190299203, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 124.83668164100222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 115.0175961280026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('waitstates_propagating_vs_terminal', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_waitstates_propagating_vs_terminal_inclusive(self):
        correct_values = [363.5627851479975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          363.56124833299737, 23.704618661000485, 0.0, 0.0, 23.704618661000485, 0.0, 100.00235190299203,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.00235190299203, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          124.83668164100222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 124.83668164100222, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 115.0175961280026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 115.0175961280026, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0,
                          0.0, 0.0015368150001222602, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('waitstates_propagating_vs_terminal', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_propagating_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          2.8421709430404007E-14, 0.0, 0.0, 0.0, 2.5745509437686587, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 37.16009169423945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 52.68013421521217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 46.393979562352314, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_propagating', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_propagating_inclusive(self):
        correct_values = [138.80875641557262, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          138.80875641557262, 2.5745509437686587, 0.0, 0.0, 2.5745509437686587, 0.0, 37.16009169423945,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 37.16009169423945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          52.68013421521217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52.68013421521217, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 46.393979562352314, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 46.393979562352314, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_propagating', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_terminal_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          -2.8421709430404007E-14, 0.0, 0.0, 0.0, 21.130067717231817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 62.842260208752606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 72.15654742579007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 68.62361656565031, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_terminal', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_terminal_inclusive(self):
        correct_values = [224.75402873242487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          224.75249191742475, 21.130067717231817, 0.0, 0.0, 21.130067717231817, 0.0, 62.842260208752606,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 62.842260208752606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          72.15654742579007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 72.15654742579007, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 68.62361656565031, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 68.62361656565031, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0,
                          0.0, 0.0015368150001222602, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_terminal', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_waitstates_direct_vs_indirect_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          5.6843418860808015E-14, 0.0, 0.0, 0.0, 23.704618661000485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 38.53662098699651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 66.05732320699886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 59.689554927999716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('waitstates_direct_vs_indirect', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_waitstates_direct_vs_indirect_inclusive(self):
        correct_values = [187.98965459799575, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          187.98811778299563, 23.704618661000485, 0.0, 0.0, 23.704618661000485, 0.0, 38.53662098699651,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38.53662098699651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          66.05732320699886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 66.05732320699886, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 59.689554927999716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 59.689554927999716, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0,
                          0.0, 0.0015368150001222602, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('waitstates_direct_vs_indirect', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_di_latesender_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          5.6843418860808015E-14, 0.0, 0.0, 0.0, 23.704618661000485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 38.53662098699651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 66.05732320699886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 59.689554927999716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_di_latesender', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_di_latesender_inclusive(self):
        correct_values = [187.98965459799575, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          187.98811778299563, 23.704618661000485, 0.0, 0.0, 23.704618661000485, 0.0, 38.53662098699651,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38.53662098699651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          66.05732320699886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 66.05732320699886, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 59.689554927999716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 59.689554927999716, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0,
                          0.0, 0.0015368150001222602, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_di_latesender', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_direct_latesender_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          1.4210854715202004E-14, 0.0, 0.0, 0.0, 7.6484517268296335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 18.26312310306877, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 25.233498586716028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 22.17547242825509, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_direct_latesender', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_direct_latesender_inclusive(self):
        correct_values = [73.32208265986966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          73.32054584486954, 7.6484517268296335, 0.0, 0.0, 7.6484517268296335, 0.0, 18.26312310306877,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.26312310306877, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          25.233498586716028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25.233498586716028, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 22.17547242825509, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 22.17547242825509, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015368150001222602, 0.0,
                          0.0, 0.0015368150001222602, 0.0, 0.0, 0.0015368150001222602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_direct_latesender', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_indirect_latesender_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          1.4210854715202004E-14, 0.0, 0.0, 0.0, 16.056166934170854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 20.27349788392775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 40.82382462028283, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 37.5140824997446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_indirect_latesender', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_mpi_wait_indirect_latesender_inclusive(self):
        correct_values = [114.66757193812604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          114.66757193812604, 16.056166934170854, 0.0, 0.0, 16.056166934170854, 0.0, 20.27349788392775,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.27349788392775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          40.82382462028283, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 40.82382462028283, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 37.5140824997446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 37.5140824997446, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('mpi_wait_indirect_latesender', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_critical_path_exclusive(self):
        correct_values = [9.474733522552015E-4, 1.2141300000001465E-4, 0.484540572, 8.45999999943281E-7,
                          2.0199999994918727E-7, 7.289600000004448E-5, 8.102200000004167E-5, 2.7235727739660653E-5,
                          1.6630833690078894E-5, 2.030479695003251E-5, 0.50726577615204, 3.2599999999494145E-7,
                          0.08836223600000004, 0.3144412309999999, 1.0429999999228556E-6, 0.0019808159974559203,
                          3.4665362422724115, 0.017733221000816757, 0.011526943000168766, 3.6169895190003554,
                          80.06922971599963, 0.011066870003858753, 92.03039587100893, 0.011616463999297721,
                          0.6151749420002735, 0.01342793699919187, 5.871430006303413E-4, 0.0065044809991294805,
                          0.6590370899996671, 0.5747824299988176, 0.1398171909918815, 22.52365735300028,
                          0.12824020199996822, 0.006180223000157081, 2.933909991567063E-4, 0.0027669979996760574,
                          0.03823824899904915, 0.013464968000363342, 116.46982166097344, 0.013380813998743024,
                          0.6795257489995099, 0.012340789000101271, 3.4591900031566425E-4, 0.004912373000261816,
                          1.5116878300002794, 0.3647749090000447, 0.1327822840272237, 18.234060744000672,
                          0.09464427899969774, 0.01914733299965876, 5.778380002143813E-4, 0.009473528999643044,
                          0.05128030399955641, 0.013252544997840232, 109.58468447701523, 0.012888434000218219,
                          0.5175658900000135, 0.009852269999666596, 3.116390001229874E-4, 0.004052808999843727,
                          1.3295442510015811, 0.3123140900001844, 0.14233491798484588, 18.674469768000314,
                          0.05471262000114674, 0.021178099998879762, 6.80844001613945E-4, 0.012688460998931284,
                          0.05106067299970496, 7.316419989000245, 5.529974194118381E-7, 7.552872885474571E-5,
                          2.272177277973242E-5, 5.17999978910666E-7, 1.4180000107444357E-6, 9.900003306029248E-8,
                          9.954711168802532E-5, 0.040857431986182746, 8.330899999009489E-5, 0.01330186701841285,
                          1.666200000727258E-5, 6.48480000222662E-5, 0.01907415199997331, 0.32000261899997895,
                          0.008601503991201298, 4.594699998961005E-5, 2.044679062009891E-4, 6.379136209488934E-5, 0.0, ]
        metric_values = self.get_values_for_metric('critical_path', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_critical_path_inclusive(self):
        correct_values = [481.41443258600833, 0.484816951, 0.484540572, 8.45999999943281E-7, 2.0199999994918727E-7,
                          7.289600000004448E-5, 8.102200000004167E-5, 2.7235727739660653E-5, 1.6630833690078894E-5,
                          2.030479695003251E-5, 0.50726577615204, 3.2599999999494145E-7, 0.08836223600000004,
                          0.3144412309999999, 1.0429999999228556E-6, 479.61601639327085, 87.18201564127338,
                          0.017733221000816757, 0.011526943000168766, 3.6169895190003554, 80.06922971599963,
                          116.76178683499997, 92.18182952600012, 0.011616463999297721, 0.6286028789994653,
                          0.01342793699919187, 0.007091623999759822, 0.0065044809991294805, 0.6590370899996671,
                          0.5747824299988176, 0.1398171909918815, 22.52365735300028, 0.1344204250001253,
                          0.006180223000157081, 0.0030603889988327637, 0.0027669979996760574, 0.03823824899904915,
                          137.61222132299972, 116.6159847589994, 0.013380813998743024, 0.6918665379996112,
                          0.012340789000101271, 0.00525829200057748, 0.004912373000261816, 1.5116878300002794,
                          0.3647749090000447, 0.1327822840272237, 18.234060744000672, 0.1137916119993565,
                          0.01914733299965876, 0.010051366999857425, 0.009473528999643044, 0.05128030399955641,
                          130.74159178900013, 109.73990782900029, 0.012888434000218219, 0.5274181599996801,
                          0.009852269999666596, 0.004364447999966714, 0.004052808999843727, 1.3295442510015811,
                          0.3123140900001844, 0.14233491798484588, 18.674469768000314, 0.0758907200000265,
                          0.021178099998879762, 0.013369305000545229, 0.012688460998931284, 0.05106067299970496,
                          7.316419989000245, 5.529974194118381E-7, 7.552872885474571E-5, 2.272177277973242E-5,
                          5.17999978910666E-7, 1.4180000107444357E-6, 9.900003306029248E-8, 0.4021478871074464,
                          0.04094074098617284, 8.330899999009489E-5, 0.35246014801839465, 1.666200000727258E-5,
                          6.48480000222662E-5, 0.01907415199997331, 0.32000261899997895, 0.008647450991190908,
                          4.594699998961005E-5, 2.044679062009891E-4, 6.379136209488934E-5, 0.0, ]
        metric_values = self.get_values_for_metric('critical_path', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_critical_path_imbalance_exclusive(self):
        correct_values = [1.1204724912339259E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 8.904687500300296E-7, 0.0, 0.0,
                          1.0148336015858989E-6, 0.00979272901652356, 0.0, 8.19734859375032E-4, 0.0042364939999998685,
                          0.0, 2.3454036750969465E-5, 0.022819519872457505, 0.0034039544383082446, 0.0, 0.0,
                          0.481327463484007, 1.3021309419380955E-4, 1.2602173187380474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.008943921163983626, 0.25878913248459406, 0.0, 0.0, 0.0, 0.0, 0.0,
                          1.8859349425048855E-4, 1.1734576190383177, 4.6422688929551037E-4, 0.162079825885372, 0.0, 0.0,
                          0.0, 0.2587883420627453, 0.0010976599063532435, 0.0033312495581245, 0.3509091742663415, 0.0,
                          0.0, 0.0, 0.0, 0.002813257265262915, 1.7165867703661242E-4, 1.0769441332333805,
                          2.585127971207746E-4, 0.0704673117810217, 0.0, 0.0, 0.0, 0.20807652551689576, 0.0,
                          0.002202164360806891, 0.37066864509388614, 0.0, 0.0, 0.0, 0.0, 0.0029476619525199144,
                          0.11018268720332092, 0.0, 1.921588988834655E-5, 0.0, 0.0, 0.0, 0.0, 8.657881897513806E-7,
                          0.0012882616748202808, 1.704581882577827E-5, 1.2112608957500067E-4, 0.0, 6.27281273146707E-7,
                          7.825216406054379E-4, 0.0022952311874746556, 0.0, 1.1651909374243985E-5, 0.0,
                          6.279462206215669E-5, 0.0, ]
        metric_values = self.get_values_for_metric('critical_path_imbalance', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_critical_path_imbalance_inclusive(self):
        correct_values = [5.8501656360996455, 8.904687500300296E-7, 0.0, 0.0, 0.0, 0.0, 8.904687500300296E-7, 0.0, 0.0,
                          1.0148336015858989E-6, 0.00979272901652356, 0.0, 8.19734859375032E-4, 0.0042364939999998685,
                          0.0, 5.830704226294395, 0.5075509377947728, 0.0034039544383082446, 0.0, 0.0,
                          0.481327463484007, 1.528080585480819, 1.2691612399020311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.008943921163983626, 0.25878913248459406, 0.0, 0.0, 0.0, 0.0, 0.0, 1.953129948366063,
                          1.1772530954857376, 4.6422688929551037E-4, 0.162079825885372, 0.0, 0.0, 0.0,
                          0.2587883420627453, 0.0010976599063532435, 0.0033312495581245, 0.3509091742663415, 0.0, 0.0,
                          0.0, 0.0, 0.002813257265262915, 1.7317366134126682, 1.079404810391308, 2.585127971207746E-4,
                          0.0704673117810217, 0.0, 0.0, 0.0, 0.20807652551689576, 0.0, 0.002202164360806891,
                          0.37066864509388614, 0.0, 0.0, 0.0, 0.0, 0.0029476619525199144, 0.11018268720332092, 0.0,
                          1.921588988834655E-5, 0.0, 0.0, 0.0, 0.0, 0.004517331390138295, 0.001305307493646059,
                          1.704581882577827E-5, 0.003199506198928241, 0.0, 6.27281273146707E-7, 7.825216406054379E-4,
                          0.0022952311874746556, 1.1651909374243985E-5, 1.1651909374243985E-5, 0.0,
                          6.279462206215669E-5, 0.0, ]
        metric_values = self.get_values_for_metric('critical_path_imbalance', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_performance_impact_exclusive(self):
        correct_values = [0.059333944820537, 0.009117050431964202, 31.010564944547607, 6.40300504406224E-5,
                          1.3904924994523112E-5, 0.006085189928949893, 0.0051824525864015486, 0.001974627331811085,
                          0.0024894971047804137, 0.0013211503628667305, 32.466889004930295, 4.3195638472987386E-5,
                          5.658456648052824, 20.11156995553484, 8.627348277463299E-5, 0.12852727332210634,
                          221.43383927168634, 1.123167677926803, 1.2074014970006888, 234.56815001434214,
                          5122.547418444511, 0.7965971344374339, 5884.800115969488, 0.9259832318803567,
                          43.55173591956376, 1.2983958860111522, 0.06001862999249319, 0.5394936141292332,
                          45.398312431706465, 38.6383837062358, 8.932553279379679, 1440.4408710968398,
                          8.665593460123015, 1.132289014993593, 0.05973915798450968, 0.531071308005012,
                          2.523560160024783, 0.9388775570168946, 7449.290063529157, 0.8707752468884552,
                          42.76269019936112, 1.9254478609992178, 0.06395409498943572, 0.9247005769990966,
                          96.12144280357089, 24.020942941900678, 8.489418808035325, 1165.5482945743693,
                          6.03279644130593, 2.1353252759966277, 0.0736133340144618, 1.0032437172734336,
                          3.2820809763999783, 0.9032672429384547, 7009.171647683124, 0.8461947705559267,
                          32.76700521113806, 1.7770466339989017, 0.0636454680005647, 0.8499905879919236,
                          84.31297089375477, 21.418374990815327, 9.114995215604097, 1193.736726230437,
                          3.490558855238099, 1.9859988259910244, 0.07038108598686232, 0.9895606565513275,
                          3.2627992931204184, 467.81667438476217, 4.636037616078947E-5, 0.004769954814217083,
                          0.0022323562356708045, 4.948336189763202E-5, 1.1824513560339904E-4, 8.260400896613834E-6,
                          0.006020074839433676, 2.610761026966416, 0.005319254978803117, 0.8518296324626426,
                          0.0016689851733031344, 0.004273963711411072, 1.21826280187546, 20.47242581370056,
                          0.6218039368975986, 0.00291878829982731, 0.0127166335325254, 0.0038221745436953936,
                          0.006721739612032707, ]
        metric_values = self.get_values_for_metric('performance_impact', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_performance_impact_inclusive(self):
        correct_values = [30810.523685504522, 31.031027572470357, 31.010564944547607, 6.40300504406224E-5,
                          1.3904924994523112E-5, 0.006085189928949893, 0.0051824525864015486, 0.001974627331811085,
                          0.0024894971047804137, 0.0013211503628667305, 32.466889004930295, 4.3195638472987386E-5,
                          5.658456648052824, 20.11156995553484, 8.627348277463299E-5, 30695.36472414787,
                          5580.879976905467, 1.123167677926803, 1.2074014970006888, 234.56815001434214,
                          5122.547418444511, 7478.2947140007955, 5894.658652480748, 0.9259832318803567,
                          44.85013180557491, 1.2983958860111522, 0.5995122441217264, 0.5394936141292332,
                          45.398312431706465, 38.6383837062358, 8.932553279379679, 1440.4408710968398,
                          9.797882475116607, 1.132289014993593, 0.5908104659895217, 0.531071308005012,
                          2.523560160024783, 8803.483667938277, 7458.6502575840805, 0.8707752468884552,
                          44.68813806036034, 1.9254478609992178, 0.9886546719885323, 0.9247005769990966,
                          96.12144280357089, 24.020942941900678, 8.489418808035325, 1165.5482945743693,
                          8.168121717302558, 2.1353252759966277, 1.0768570512878954, 1.0032437172734336,
                          3.2820809763999783, 8364.761163645248, 7019.1328376692845, 0.8461947705559267,
                          34.54405184513696, 1.7770466339989017, 0.9136360559924883, 0.8499905879919236,
                          84.31297089375477, 21.418374990815327, 9.114995215604097, 1193.736726230437,
                          5.4765576812291235, 1.9859988259910244, 1.0599417425381898, 0.9895606565513275,
                          3.2627992931204184, 467.81667438476217, 4.636037616078947E-5, 0.004769954814217083,
                          0.0022323562356708045, 4.948336189763202E-5, 1.1824513560339904E-4, 8.260400896613834E-6,
                          25.795284278905456, 2.616080281945219, 0.005319254978803117, 22.548461196923377,
                          0.0016689851733031344, 0.004273963711411072, 1.21826280187546, 20.47242581370056,
                          0.6247227251974259, 0.00291878829982731, 0.0127166335325254, 0.0038221745436953936,
                          0.006721739612032707, ]
        metric_values = self.get_values_for_metric('performance_impact', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_performance_impact_criticalpath_exclusive(self):
        correct_values = [0.05872129114504787, 0.007769444431961148, 31.01056477754761, 5.4042050438108085E-5,
                          1.2926924990874551E-5, 0.00466532392895301, 0.0051820725864015265, 0.0017430865753382818,
                          0.0010643733561650492, 0.001292725647117244, 32.42187263763108, 2.0838638472348382E-5,
                          5.651116031052824, 20.10474673353484, 6.622248277050425E-5, 0.12613625953599694,
                          221.4338392716836, 1.120911894930621, 0.737724352010801, 231.40389842535672,
                          5122.4697924745105, 0.7081992486373565, 5884.800115969485, 0.7433216788398957,
                          39.36224303358527, 0.8593879679482797, 0.0375771520403419, 0.4161546810763954,
                          42.09547836370094, 36.781029533171484, 8.908633758297196, 1440.4408710968398,
                          8.204063195120566, 0.3955342720100532, 0.018777023946029203, 0.17708787197926767,
                          2.4433585749938107, 0.86116147402754, 7449.290063529156, 0.8534407198492161,
                          42.76269019936111, 0.7898104960064813, 0.022138816020202512, 0.3143918720167562,
                          95.82162552357693, 23.304685799909272, 8.484435835154855, 1165.5482945743693,
                          6.03279644130593, 1.2254293119781607, 0.0369816320137204, 0.6061750692636257,
                          3.269729914397405, 0.8473028198695829, 7009.051273089121, 0.8222103005694184,
                          32.767005211138056, 0.6305452799786622, 0.019944896007871193, 0.2593797759899985,
                          84.19806238775425, 19.97549681783101, 9.100245288490104, 1193.736726230437,
                          3.4881468972406253, 1.3553983999283048, 0.04357401610329248, 0.8089653435008769,
                          3.2562456141141958, 467.81667438476217, 3.528237434624326E-5, 0.004750647706073732,
                          0.0014482680766188503, 3.267636115005578E-5, 9.039913580762652E-5, 6.3344025633507106E-6,
                          0.00601691684105532, 2.6095627279936346, 0.005267428978970118, 0.850764151381231,
                          0.0010662691736411387, 0.004139501711974064, 1.21810450787533, 20.470687638700547,
                          0.5504313433456139, 0.0028869552999041563, 0.0127166335325254, 0.0038221745436953936, 0.0, ]
        metric_values = self.get_values_for_metric('performance_impact_criticalpath', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_performance_impact_criticalpath_inclusive(self):
        correct_values = [30786.095906445913, 31.028248587470355, 31.01056477754761, 5.4042050438108085E-5,
                          1.2926924990874551E-5, 0.00466532392895301, 0.0051820725864015265, 0.0017430865753382818,
                          0.0010643733561650492, 0.001292725647117244, 32.42187263763108, 2.0838638472348382E-5,
                          5.651116031052824, 20.10474673353484, 6.622248277050425E-5, 30671.085184060943,
                          5577.166166418492, 1.120911894930621, 0.737724352010801, 231.40389842535672,
                          5122.4697924745105, 7466.391833421672, 5894.452071406622, 0.7433216788398957,
                          40.22163100153355, 0.8593879679482797, 0.4537318331167373, 0.4161546810763954,
                          42.09547836370094, 36.781029533171484, 8.908633758297196, 1440.4408710968398,
                          8.59959746713062, 0.3955342720100532, 0.19586489592529688, 0.17708787197926767,
                          2.4433585749938107, 8799.223851208406, 7458.62794008416, 0.8534407198492161,
                          43.55250069536759, 0.7898104960064813, 0.33653068803695874, 0.3143918720167562,
                          95.82162552357693, 23.304685799909272, 8.484435835154855, 1165.5482945743693,
                          7.258225753284091, 1.2254293119781607, 0.6431567012773461, 0.6061750692636257,
                          3.269729914397405, 8360.360522368077, 7018.973728678181, 0.8222103005694184,
                          33.39755049111672, 0.6305452799786622, 0.2793246719978697, 0.2593797759899985,
                          84.19806238775425, 19.97549681783101, 9.100245288490104, 1193.736726230437, 4.84354529716893,
                          1.3553983999283048, 0.8525393596041694, 0.8089653435008769, 3.2562456141141958,
                          467.81667438476217, 3.528237434624326E-5, 0.004750647706073732, 0.0014482680766188503,
                          3.267636115005578E-5, 9.039913580762652E-5, 6.3344025633507106E-6, 25.7189274413019,
                          2.6148301569726047, 0.005267428978970118, 22.544762068842722, 0.0010662691736411387,
                          0.004139501711974064, 1.21810450787533, 20.470687638700547, 0.5533182986455181,
                          0.0028869552999041563, 0.0127166335325254, 0.0038221745436953936, 0.0, ]
        metric_values = self.get_values_for_metric('performance_impact_criticalpath', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_critical_path_activities_exclusive(self):
        correct_values = [0.03088824695441872, 0.007756524000004816, 31.010119223, 5.260399999751364E-5,
                          1.2909999996923993E-5, 0.004664386000002851, 0.005128038000000723, 0.0017430865753382818,
                          0.0010643733561650492, 0.0012061329385510966, 31.793258649373836, 2.0463999999553728E-5,
                          5.595379456000002, 19.846279946000003, 5.852599999678354E-5, 0.11659801297719241,
                          214.4672933827178, 0.9148172770043628, 0.737724352010801, 229.53751570401352,
                          5093.548118190998, 0.7069642882206608, 5809.55053021702, 0.7413862889551894,
                          39.14079758101762, 0.8593879679482797, 0.037577152040341844, 0.41347634094876384,
                          40.364505056989785, 36.66877344693664, 8.351969747902984, 1424.951566113004,
                          8.159167043995108, 0.3955342720100532, 0.018777023946029203, 0.17708787197926767,
                          2.38934493996677, 0.8511829560247861, 7379.115961269965, 0.8093270479654018,
                          31.79251687699923, 0.7898104960064813, 0.022138816020202512, 0.3143918720167562,
                          79.88574994800827, 22.55908680000484, 8.279883233141874, 1144.5217004629972,
                          5.672174240007722, 1.2254293119781607, 0.0369816320137204, 0.6010177019782117,
                          3.08953992899221, 0.8329869568879076, 6944.434861408067, 0.784330487011728, 27.38195804000418,
                          0.6305452799786622, 0.019944896007871193, 0.2593797759899985, 71.65902592501936,
                          19.75980070601175, 8.953746304824499, 1171.443271866011, 3.28858618600906, 1.3553983999283048,
                          0.04357401610329248, 0.7583815549597555, 3.0726790280136203, 461.199187315003,
                          3.379884827214852E-5, 0.0035847145857061946, 0.001364951350337762, 2.604999929189944E-5,
                          8.559600041735393E-5, 6.315001655821106E-6, 9.113393583675133E-4, 2.532151418958904,
                          0.004189017594683264, 0.8412625497532531, 0.0010645090007415092, 0.00397566400050664,
                          1.170506048999414, 20.33153464500026, 0.5495039904267855, 0.0021630527994602744,
                          0.007436026038192267, 6.379136209488934E-5, 0.0, ]
        metric_values = self.get_values_for_metric('critical_path_activities', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_critical_path_activities_inclusive(self):
        correct_values = [30421.44095905783, 31.027733685, 31.010119223, 5.260399999751364E-5, 1.2909999996923993E-5,
                          0.004664386000002851, 0.005128038000000723, 0.0017430865753382818, 0.0010643733561650492,
                          0.0012061329385510966, 31.793258649373836, 2.0463999999553728E-5, 5.595379456000002,
                          19.846279946000003, 5.852599999678354E-5, 30307.693463012558, 5539.2054689067445,
                          0.9148172770043628, 0.737724352010801, 229.53751570401352, 5093.548118190998,
                          7372.926845352883, 5818.643886253879, 0.7413862889551894, 40.0001855489659,
                          0.8593879679482797, 0.4510534929891057, 0.41347634094876384, 40.364505056989785,
                          36.66877344693664, 8.351969747902984, 1424.951566113004, 8.554701316005161,
                          0.3955342720100532, 0.19586489592529688, 0.17708787197926767, 2.38934493996677,
                          8679.56689259412, 7388.205171551072, 0.8093270479654018, 32.58232737300571,
                          0.7898104960064813, 0.33653068803695874, 0.3143918720167562, 79.88574994800827,
                          22.55908680000484, 8.279883233141874, 1144.5217004629972, 6.897603551985883,
                          1.2254293119781607, 0.6379993339919321, 0.6010177019782117, 3.08953992899221,
                          8254.678470830828, 6954.172938199904, 0.784330487011728, 28.01250331998284,
                          0.6305452799786622, 0.2793246719978697, 0.2593797759899985, 71.65902592501936,
                          19.75980070601175, 8.953746304824499, 1171.443271866011, 4.643984585937365,
                          1.3553983999283048, 0.8019555710630479, 0.7583815549597555, 3.0726790280136203,
                          461.199187315003, 3.379884827214852E-5, 0.0035847145857061946, 0.001364951350337762,
                          2.604999929189944E-5, 8.559600041735393E-5, 6.315001655821106E-6, 25.437262235892376,
                          2.536340436553587, 0.004189017594683264, 22.348343416754176, 0.0010645090007415092,
                          0.00397566400050664, 1.170506048999414, 20.33153464500026, 0.5516670432262458,
                          0.0021630527994602744, 0.007436026038192267, 6.379136209488934E-5, 0.0, ]
        metric_values = self.get_values_for_metric('critical_path_activities', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_critical_imbalance_impact_exclusive(self):
        correct_values = [0.027833044192618672, 1.2920431962557878E-5, 4.4555454760741175E-4, 1.4380504405944427E-6,
                          1.692499395055854E-8, 9.379289501585072E-7, 5.403458640080324E-5, 0.0, 0.0,
                          8.659270856614724E-5, 0.6286139882572458, 3.7463847279465215E-7, 0.05573657505282381,
                          0.2584667875348356, 7.696482773720718E-6, 0.009538246567842634, 6.966545888966454,
                          0.20609461792625824, 0.0, 1.8663827213431994, 28.921674283512154, 0.0012349604179462403,
                          75.24958575246198, 0.0019353898847063872, 0.22144545256767, 0.0, 0.0, 0.002678340127631649,
                          1.7309733067111397, 0.11225608623481223, 0.5566640103942144, 15.489304983835712,
                          0.04489615112546206, 0.0, 0.0, 0.0, 0.05401363502704149, 0.009978517998618486,
                          70.17410225919136, 0.04411367188381404, 10.970173322361882, 0.0, 0.0, 0.0, 15.935875575568666,
                          0.7455989999044275, 0.204552602012979, 21.026594111371782, 0.36062220129820854, 0.0, 0.0,
                          0.005157367285413957, 0.18018998540519543, 0.01431586298618015, 64.6164116810536,
                          0.03787981355769022, 5.385047171133875, 0.0, 0.0, 0.0, 12.539036462734877,
                          0.21569611181925866, 0.14649898366560343, 22.29345436442608, 0.19956071123156513, 0.0, 0.0,
                          0.05058378854112141, 0.18356658610057605, 6.617487069759111, 1.4835260740947406E-6,
                          0.0011659331203675376, 8.331672628108841E-5, 6.626361858156338E-6, 4.803135390272594E-6,
                          1.940090752960401E-8, 0.00510557748269036, 0.07741130903473048, 0.0010784113842868541,
                          0.009501601627977613, 1.7601728996294352E-6, 1.6383771146742426E-4, 0.047598458875916135,
                          0.13915299370028616, 9.273529188283947E-4, 7.239025004438817E-4, 0.005280607494333134,
                          0.0037583831816005043, 0.0, ]
        metric_values = self.get_values_for_metric('critical_imbalance_impact', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_critical_imbalance_impact_inclusive(self):
        correct_values = [364.6549473880902, 5.149024703554764E-4, 4.4555454760741175E-4, 1.4380504405944427E-6,
                          1.692499395055854E-8, 9.379289501585072E-7, 5.403458640080324E-5, 0.0, 0.0,
                          8.659270856614724E-5, 0.6286139882572458, 3.7463847279465215E-7, 0.05573657505282381,
                          0.2584667875348356, 7.696482773720718E-6, 363.39172104839616, 37.960697511748066,
                          0.20609461792625824, 0.0, 1.8663827213431994, 28.921674283512154, 93.4649880687883,
                          75.8081851527409, 0.0019353898847063872, 0.22144545256767, 0.0, 0.002678340127631649,
                          0.002678340127631649, 1.7309733067111397, 0.11225608623481223, 0.5566640103942144,
                          15.489304983835712, 0.04489615112546206, 0.0, 0.0, 0.0, 0.05401363502704149,
                          119.65695861428236, 70.42276853308815, 0.04411367188381404, 10.970173322361882, 0.0, 0.0, 0.0,
                          15.935875575568666, 0.7455989999044275, 0.204552602012979, 21.026594111371782,
                          0.36062220129820854, 0.0, 0.005157367285413957, 0.005157367285413957, 0.18018998540519543,
                          105.68205153725043, 64.8007904782769, 0.03787981355769022, 5.385047171133875, 0.0, 0.0, 0.0,
                          12.539036462734877, 0.21569611181925866, 0.14649898366560343, 22.29345436442608,
                          0.19956071123156513, 0.0, 0.05058378854112141, 0.05058378854112141, 0.18356658610057605,
                          6.617487069759111, 1.4835260740947406E-6, 0.0011659331203675376, 8.331672628108841E-5,
                          6.626361858156338E-6, 4.803135390272594E-6, 1.940090752960401E-8, 0.28166520540952694,
                          0.07848972041901733, 0.0010784113842868541, 0.19641865208854697, 1.7601728996294352E-6,
                          1.6383771146742426E-4, 0.047598458875916135, 0.13915299370028616, 0.0016512554192722763,
                          7.239025004438817E-4, 0.005280607494333134, 0.0037583831816005043, 0.0, ]
        metric_values = self.get_values_for_metric('critical_imbalance_impact', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_intra_partition_imbalance_exclusive(self):
        correct_values = [0.027833044192618672, 1.2920431962557878E-5, 4.4555454760741175E-4, 1.4380504405944427E-6,
                          1.692499395055854E-8, 9.379289501585072E-7, 5.403458640080324E-5, 0.0, 0.0,
                          8.659270856614724E-5, 0.6286139882572458, 3.7463847279465215E-7, 0.05573657505282381,
                          0.2584667875348356, 7.696482773720718E-6, 0.009538246567842634, 6.966545888966454,
                          0.20609461792625824, 0.0, 1.8663827213431994, 28.921674283512154, 0.0012349604179462403,
                          75.24958575246198, 0.0019353898847063872, 0.22144545256767, 0.0, 0.0, 0.002678340127631649,
                          1.7309733067111397, 0.11225608623481223, 0.5566640103942144, 15.489304983835712,
                          0.04489615112546206, 0.0, 0.0, 0.0, 0.05401363502704149, 0.009978517998618486,
                          70.17410225919136, 0.04411367188381404, 10.970173322361882, 0.0, 0.0, 0.0, 15.935875575568666,
                          0.7455989999044275, 0.204552602012979, 21.026594111371782, 0.36062220129820854, 0.0, 0.0,
                          0.005157367285413957, 0.18018998540519543, 0.01431586298618015, 64.6164116810536,
                          0.03787981355769022, 5.385047171133875, 0.0, 0.0, 0.0, 12.539036462734877,
                          0.21569611181925866, 0.14649898366560343, 22.29345436442608, 0.19956071123156513, 0.0, 0.0,
                          0.05058378854112141, 0.18356658610057605, 6.617487069759111, 1.4835260740947406E-6,
                          0.0011659331203675376, 8.331672628108841E-5, 6.626361858156338E-6, 4.803135390272594E-6,
                          1.940090752960401E-8, 0.00510557748269036, 0.07741130903473048, 0.0010784113842868541,
                          0.009501601627977613, 1.7601728996294352E-6, 1.6383771146742426E-4, 0.047598458875916135,
                          0.13915299370028616, 9.273529188283947E-4, 7.239025004438817E-4, 0.005280607494333134,
                          0.0037583831816005043, 0.0, ]
        metric_values = self.get_values_for_metric('intra_partition_imbalance', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_intra_partition_imbalance_inclusive(self):
        correct_values = [364.6549473880902, 5.149024703554764E-4, 4.4555454760741175E-4, 1.4380504405944427E-6,
                          1.692499395055854E-8, 9.379289501585072E-7, 5.403458640080324E-5, 0.0, 0.0,
                          8.659270856614724E-5, 0.6286139882572458, 3.7463847279465215E-7, 0.05573657505282381,
                          0.2584667875348356, 7.696482773720718E-6, 363.39172104839616, 37.960697511748066,
                          0.20609461792625824, 0.0, 1.8663827213431994, 28.921674283512154, 93.4649880687883,
                          75.8081851527409, 0.0019353898847063872, 0.22144545256767, 0.0, 0.002678340127631649,
                          0.002678340127631649, 1.7309733067111397, 0.11225608623481223, 0.5566640103942144,
                          15.489304983835712, 0.04489615112546206, 0.0, 0.0, 0.0, 0.05401363502704149,
                          119.65695861428236, 70.42276853308815, 0.04411367188381404, 10.970173322361882, 0.0, 0.0, 0.0,
                          15.935875575568666, 0.7455989999044275, 0.204552602012979, 21.026594111371782,
                          0.36062220129820854, 0.0, 0.005157367285413957, 0.005157367285413957, 0.18018998540519543,
                          105.68205153725043, 64.8007904782769, 0.03787981355769022, 5.385047171133875, 0.0, 0.0, 0.0,
                          12.539036462734877, 0.21569611181925866, 0.14649898366560343, 22.29345436442608,
                          0.19956071123156513, 0.0, 0.05058378854112141, 0.05058378854112141, 0.18356658610057605,
                          6.617487069759111, 1.4835260740947406E-6, 0.0011659331203675376, 8.331672628108841E-5,
                          6.626361858156338E-6, 4.803135390272594E-6, 1.940090752960401E-8, 0.28166520540952694,
                          0.07848972041901733, 0.0010784113842868541, 0.19641865208854697, 1.7601728996294352E-6,
                          1.6383771146742426E-4, 0.047598458875916135, 0.13915299370028616, 0.0016512554192722763,
                          7.239025004438817E-4, 0.005280607494333134, 0.0037583831816005043, 0.0, ]
        metric_values = self.get_values_for_metric('intra_partition_imbalance', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_inter_partition_imbalance_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('inter_partition_imbalance', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_inter_partition_imbalance_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('inter_partition_imbalance', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_non_critical_path_activities_exclusive(self):
        correct_values = [6.126537100570317E-4, 0.0013476059999977608, 1.669999999953653E-7, 9.988000002514319E-6,
                          9.780000036485603E-7, 0.0014198659999968832, 3.800000000220294E-7, 2.3154075647280337E-4,
                          0.0014251237486153645, 2.8424715749486573E-5, 0.04501636729921077, 2.2357000000639005E-5,
                          0.00734061699999955, 0.006823222000000517, 2.005100000412874E-5, 0.002391013767759631,
                          8.881784197001252E-16, 0.0022557829961820097, 0.4696771449898878, 3.1642515889853944,
                          0.07762597000058236, 0.08839788580401908, 0.0, 0.18266155304046094, 4.189492885978478,
                          0.43900791806287254, 0.022441477952151345, 0.12333893305283783, 3.3028340680055415,
                          1.857354173064307, 0.023919521082481854, 0.0, 0.46153026500244376, 0.7367547429835397,
                          0.04096213403848048, 0.35398343602574434, 0.08020158503097208, 0.07771608299225097, 0.0,
                          0.0173345270392391, 0.0, 1.1356373649927365, 0.041815278969233205, 0.6103087049823404,
                          0.29981727999396046, 0.7162571419913975, 0.004982972880471337, 0.0, 0.0, 0.909895964018467,
                          0.036631702000741395, 0.397068648009808, 0.01235106200257352, 0.05596442306448335,
                          0.12037459400205819, 0.023984469986508383, 0.0, 1.1465013540202396, 0.043700571992693504,
                          0.5906108120019251, 0.11490850600052216, 1.4428781729843134, 0.014749927113997252, 0.0,
                          0.0024119579974710703, 0.6306004260627196, 0.026807069883569845, 0.18059531305045073,
                          0.0065536790062226125, 0.0, 1.1078001814546212E-5, 1.930710814335157E-5, 7.840881590519544E-4,
                          1.680700074757624E-5, 2.7845999795772514E-5, 1.9259983332631236E-6, 3.157998378355842E-6,
                          0.001198298972781231, 5.1825999832999514E-5, 0.00106548108141169, 6.027159996619957E-4,
                          1.3446199943700776E-4, 1.5829400012989936E-4, 0.0017381750000140528, 0.07137259355198466,
                          3.183299992315369E-5, 0.0, 0.0, 0.006721739612032707, ]
        metric_values = self.get_values_for_metric('non_critical_path_activities', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_non_critical_path_activities_inclusive(self):
        correct_values = [24.427779058618114, 0.0027789850000008243, 1.669999999953653E-7, 9.988000002514319E-6,
                          9.780000036485603E-7, 0.0014198659999968832, 3.800000000220294E-7, 2.3154075647280337E-4,
                          0.0014251237486153645, 2.8424715749486573E-5, 0.04501636729921077, 2.2357000000639005E-5,
                          0.00734061699999955, 0.006823222000000517, 2.005100000412874E-5, 24.27954008690453,
                          3.713810486972047, 0.0022557829961820097, 0.4696771449898878, 3.1642515889853944,
                          0.07762597000058236, 11.902880579124329, 0.2065810741229428, 0.18266155304046094,
                          4.62850080404135, 0.43900791806287254, 0.14578041100498917, 0.12333893305283783,
                          3.3028340680055415, 1.857354173064307, 0.023919521082481854, 0.0, 1.1982850079859835,
                          0.7367547429835397, 0.3949455700642248, 0.35398343602574434, 0.08020158503097208,
                          4.2598167298732195, 0.022317499919710437, 0.0173345270392391, 1.1356373649927365,
                          1.1356373649927365, 0.6521239839515736, 0.6103087049823404, 0.29981727999396046,
                          0.7162571419913975, 0.004982972880471337, 0.0, 0.909895964018467, 0.909895964018467,
                          0.4337003500105494, 0.397068648009808, 0.01235106200257352, 4.400641277167174,
                          0.15910899110256382, 0.023984469986508383, 1.1465013540202396, 1.1465013540202396,
                          0.6343113839946186, 0.5906108120019251, 0.11490850600052216, 1.4428781729843134,
                          0.014749927113997252, 0.0, 0.6330123840601907, 0.6306004260627196, 0.20740238293402058,
                          0.18059531305045073, 0.0065536790062226125, 0.0, 1.1078001814546212E-5, 1.930710814335157E-5,
                          7.840881590519544E-4, 1.680700074757624E-5, 2.7845999795772514E-5, 1.9259983332631236E-6,
                          0.07635683760355505, 0.0012501249726142305, 5.1825999832999514E-5, 0.0036991280806546456,
                          6.027159996619957E-4, 1.3446199943700776E-4, 1.5829400012989936E-4, 0.0017381750000140528,
                          0.07140442655190782, 3.183299992315369E-5, 0.0, 0.0, 0.006721739612032707, ]
        metric_values = self.get_values_for_metric('non_critical_path_activities', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_exclusive(self):
        correct_values = [0.0038370693352902663, 7.853939375009507E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          4.1918624559563605E-4, 1.1906524683590394E-4, 0.25955659960010236, 2.2907156250615707E-5,
                          0.04774945615624948, 0.1572523759999993, 2.7289125001161985E-5, 0.00955920121515419,
                          5.28077278771498, 0.0, 0.0, 0.0, 11.436007926999167, 0.05890681145365306, 7.698390823584561,
                          0.05019371869090826, 2.8999726442810614, 0.0, 0.004649007798362692, 0.0, 0.0,
                          1.3549427118771393, 0.35162464830057916, 2.4534515100905274, 0.3884220769983333, 0.0,
                          0.005749320748494907, 0.0, 0.1338287904602388, 0.08199637584623787, 8.698987016077554,
                          0.06302096878281188, 3.4605518518182308, 0.0, 0.0038688142055332553, 0.0, 0.0,
                          1.4939832387385792, 0.13806921787851767, 8.379560855121383, 0.1846049929865976, 0.0,
                          0.006945695368481969, 0.0, 0.1531458379405805, 0.07113372788828087, 14.009594087566793,
                          0.06455738858278065, 1.4715761827396885, 0.0, 0.003338162364095426, 0.0, 0.0,
                          1.360057509898587, 0.11897321617573414, 5.710249883818019, 0.12085173800476592, 0.0,
                          0.005297654572229776, 0.0, 0.12264757881934407, 3.4525956126287083, 1.6601499595481073E-5,
                          0.0, 6.543398315345117E-4, 2.4209562631938297E-5, 3.2790125107595713E-5,
                          1.7094686963758932E-6, 2.4548092476806005E-4, 0.02818923060180545, 0.0, 0.012529598611852322,
                          0.0, 0.0, 0.0, 0.07064029562502583, 0.03290479374408051, 0.0, 0.0, 1.2558924412431338E-4,
                          0.0, ]
        metric_values = self.get_values_for_metric('imbalance', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_inclusive(self):
        correct_values = [81.91721357007872, 7.853939375009507E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.1918624559563605E-4,
                          1.1906524683590394E-4, 0.25955659960010236, 2.2907156250615707E-5, 0.04774945615624948,
                          0.1572523759999993, 2.7289125001161985E-5, 81.30207958803669, 16.716780714714147, 0.0, 0.0,
                          0.0, 11.436007926999167, 15.40013206428386, 8.100209190576049, 0.05019371869090826,
                          2.8999726442810614, 0.0, 0.004649007798362692, 0.0, 0.0, 1.3549427118771393,
                          0.35162464830057916, 2.4534515100905274, 0.3884220769983333, 0.0, 0.005749320748494907, 0.0,
                          0.1338287904602388, 22.664734864764508, 8.900077202738883, 0.06302096878281188,
                          3.4605518518182308, 0.0, 0.0038688142055332553, 0.0, 0.0, 1.4939832387385792,
                          0.13806921787851767, 8.379560855121383, 0.1846049929865976, 0.0, 0.006945695368481969, 0.0,
                          0.1531458379405805, 23.058277130430316, 14.193124692325307, 0.06455738858278065,
                          1.4715761827396885, 0.0, 0.003338162364095426, 0.0, 0.0, 1.360057509898587,
                          0.11897321617573414, 5.710249883818019, 0.12085173800476592, 0.0, 0.005297654572229776, 0.0,
                          0.12264757881934407, 3.4525956126287083, 1.6601499595481073E-5, 0.0, 6.543398315345117E-4,
                          2.4209562631938297E-5, 3.2790125107595713E-5, 1.7094686963758932E-6, 0.14450939950753217,
                          0.02818923060180545, 0.0, 0.08316989423687815, 0.0, 0.0, 0.0, 0.07064029562502583,
                          0.03290479374408051, 0.0, 0.0, 1.2558924412431338E-4, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_above_exclusive(self):
        correct_values = [0.0019185346676522386, 3.9269696875047534E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          2.0959312279781803E-4, 5.953262341795197E-5, 0.12977829980005284, 1.1453578125307853E-5,
                          0.02387472807812463, 0.07862618800000098, 1.3644562500580992E-5, 0.004779600607569989,
                          2.6403863938574794, 0.0, 0.0, 0.0, 5.718003963499498, 0.029453405726825643,
                          3.8491954117922225, 0.02509685934545413, 1.4499863221405311, 0.0, 0.002324503899181346, 0.0,
                          0.0, 0.6774713559385731, 0.1758123241502893, 1.2267257550452904, 0.1942110384991671, 0.0,
                          0.0028746603742474536, 0.0, 0.06691439523011941, 0.04099818792311716, 4.349493508038706,
                          0.03151048439140594, 1.7302759259091158, 0.0, 0.0019344071027666276, 0.0, 0.0,
                          0.7469916193692883, 0.06903460893925928, 4.189780427560745, 0.09230249649329836, 0.0,
                          0.0034728476842409844, 0.0, 0.07657291897029017, 0.03556686394413333, 7.004797043783728,
                          0.032278694291390325, 0.7357880913698449, 0.0, 0.001669081182047713, 0.0, 0.0,
                          0.680028754949294, 0.05948660808786729, 2.8551249419090006, 0.06042586900238292, 0.0,
                          0.002648827286114888, 0.0, 0.061323789409672036, 1.7262978063143306, 8.300749797740536E-6,
                          0.0, 3.2716991576725585E-4, 1.2104781315969149E-5, 1.6395062553797857E-5,
                          8.547343481879466E-7, 1.2274046238403002E-4, 0.014094615300902724, 0.0, 0.006264799305926161,
                          0.0, 0.0, 0.0, 0.035320147812512914, 0.016452396872040254, 0.0, 0.0, 6.279462206215669E-5,
                          0.0, ]
        metric_values = self.get_values_for_metric('imbalance_above', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_above_inclusive(self):
        correct_values = [40.95860678503952, 3.9269696875047534E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0959312279781803E-4,
                          5.953262341795197E-5, 0.12977829980005284, 1.1453578125307853E-5, 0.02387472807812463,
                          0.07862618800000098, 1.3644562500580992E-5, 40.65103979401849, 8.358390357356978, 0.0, 0.0,
                          0.0, 5.718003963499498, 7.700066032141901, 4.050104595287966, 0.02509685934545413,
                          1.4499863221405311, 0.0, 0.002324503899181346, 0.0, 0.0, 0.6774713559385731,
                          0.1758123241502893, 1.2267257550452904, 0.1942110384991671, 0.0, 0.0028746603742474536, 0.0,
                          0.06691439523011941, 11.332367432382235, 4.450038601369371, 0.03151048439140594,
                          1.7302759259091158, 0.0, 0.0019344071027666276, 0.0, 0.0, 0.7469916193692883,
                          0.06903460893925928, 4.189780427560745, 0.09230249649329836, 0.0, 0.0034728476842409844, 0.0,
                          0.07657291897029017, 11.529138565215474, 7.096562346162985, 0.032278694291390325,
                          0.7357880913698449, 0.0, 0.001669081182047713, 0.0, 0.0, 0.680028754949294,
                          0.05948660808786729, 2.8551249419090006, 0.06042586900238292, 0.0, 0.002648827286114888, 0.0,
                          0.061323789409672036, 1.7262978063143306, 8.300749797740536E-6, 0.0, 3.2716991576725585E-4,
                          1.2104781315969149E-5, 1.6395062553797857E-5, 8.547343481879466E-7, 0.07225469975376608,
                          0.014094615300902724, 0.0, 0.041584947118439075, 0.0, 0.0, 0.0, 0.035320147812512914,
                          0.016452396872040254, 0.0, 0.0, 6.279462206215669E-5, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_above', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_above_single_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_above_single', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_above_single_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_above_single', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_exclusive(self):
        correct_values = [0.0019185346676664494, 3.9269696875047534E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          2.0959312279781803E-4, 5.953262341795197E-5, 0.1297782998000495, 1.1453578125307853E-5,
                          0.02387472807812485, 0.07862618799999832, 1.3644562500580992E-5, 0.004779600607555778,
                          2.640386393857508, 0.0, 0.0, 0.0, 5.718003963499669, 0.02945340572682742, 3.849195411792337,
                          0.02509685934545413, 1.4499863221405307, 0.0, 0.002324503899181346, 0.0, 0.0,
                          0.677471355938566, 0.17581232415028997, 1.226725755045237, 0.1942110384991662, 0.0,
                          0.0028746603742474536, 0.0, 0.06691439523011941, 0.040998187923118934, 4.349493508038847,
                          0.03151048439140594, 1.730275925909115, 0.0, 0.0019344071027666276, 0.0, 0.0,
                          0.7469916193692909, 0.06903460893925839, 4.189780427560638, 0.09230249649329925, 0.0,
                          0.0034728476842409844, 0.0, 0.07657291897029023, 0.03556686394413333, 7.004797043783071,
                          0.032278694291390325, 0.7357880913698436, 0.0, 0.001669081182047713, 0.0, 0.0,
                          0.6800287549492932, 0.05948660808786685, 2.8551249419090183, 0.06042586900238292, 0.0,
                          0.002648827286114888, 0.0, 0.061323789409672036, 1.7262978063143777, 8.300749797740536E-6,
                          0.0, 3.2716991576725585E-4, 1.2104781315969149E-5, 1.6395062553797857E-5,
                          8.547343481879466E-7, 1.2274046238403002E-4, 0.014094615300902724, 0.0, 0.006264799305926161,
                          0.0, 0.0, 0.0, 0.035320147812512914, 0.016452396872040254, 0.0, 0.0, 6.279462206215669E-5,
                          0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_inclusive(self):
        correct_values = [40.95860678503921, 3.9269696875047534E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0959312279781803E-4,
                          5.953262341795197E-5, 0.1297782998000495, 1.1453578125307853E-5, 0.02387472807812485,
                          0.07862618799999832, 1.3644562500580992E-5, 40.651039794018175, 8.358390357357177, 0.0, 0.0,
                          0.0, 5.718003963499669, 7.700066032141956, 4.050104595288081, 0.02509685934545413,
                          1.4499863221405307, 0.0, 0.002324503899181346, 0.0, 0.0, 0.677471355938566,
                          0.17581232415028997, 1.226725755045237, 0.1942110384991662, 0.0, 0.0028746603742474536, 0.0,
                          0.06691439523011941, 11.332367432382274, 4.450038601369512, 0.03151048439140594,
                          1.730275925909115, 0.0, 0.0019344071027666276, 0.0, 0.0, 0.7469916193692909,
                          0.06903460893925839, 4.189780427560638, 0.09230249649329925, 0.0, 0.0034728476842409844, 0.0,
                          0.07657291897029023, 11.529138565214833, 7.096562346162329, 0.032278694291390325,
                          0.7357880913698436, 0.0, 0.001669081182047713, 0.0, 0.0, 0.6800287549492932,
                          0.05948660808786685, 2.8551249419090183, 0.06042586900238292, 0.0, 0.002648827286114888, 0.0,
                          0.061323789409672036, 1.7262978063143777, 8.300749797740536E-6, 0.0, 3.2716991576725585E-4,
                          1.2104781315969149E-5, 1.6395062553797857E-5, 8.547343481879466E-7, 0.07225469975376608,
                          0.014094615300902724, 0.0, 0.041584947118439075, 0.0, 0.0, 0.0, 0.035320147812512914,
                          0.016452396872040254, 0.0, 0.0, 6.279462206215669E-5, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_bypass_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below_bypass', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_bypass_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below_bypass', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_singularity_exclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below_singularity', convert_to_exclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)

    def test_imbalance_below_singularity_inclusive(self):
        correct_values = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ]
        metric_values = self.get_values_for_metric('imbalance_below_singularity', convert_to_inclusive=True)
        for correct, cnode_values in zip(correct_values, metric_values):
            self.assertAlmostEqual(correct, cnode_values)
